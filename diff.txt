diff --git a/README.md b/README.md
index a35e3a3..c8c0083 100644
--- a/README.md
+++ b/README.md
@@ -1,7 +1,128 @@
-This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 1.0.0-beta.32.3.
+## Dependencies
 
-## Development server
-Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.
+The frontend of this project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 1.0.0-beta.32.3. We have now migrated to 1.0.0 as it has since been released.
+
+The required versions of the major components of our project are:
+
+| Framework/Service      | Version   |
+|:-----------------------|:----------|
+| node                   | 7.7.0     |
+| npm                    | 4.1.2     |
+| @angular/cli           | 1.0.0     |
+| postgres               | 9.6.2     |
+| python                 | 3.6.0     |
+| pip                    | 9.0.1     |
+| Django                 | 1.10.5    |
+| nginx                  | 1.10.2    |
+| uwsgi                  | 2.0.14    |
+
+Angular packages should be up to date with the defaults for @angular/cli. That is, versions connected to the Angular CLI should be:
+
+| Package                             | Version        |
+|:------------------------------------|:---------------|
+| @angular/common                     |   2.4.10       |
+| @angular/compiler                   |   2.4.10       |
+| @angular/core                       |   2.4.10       |
+| @angular/flex-layout                |   2.0.0-rc.1   |
+| @angular/forms                      |   2.4.10       |
+| @angular/http                       |   2.4.10       |
+| @angular/material                   |   2.0.0-beta.2 |
+| @angular/router                     |   3.4.10       |
+| @angular/compiler-cli               |   2.4.10       |
+
+We use the Angular CLI to start the frontend server, and use additional packages for flex layout and material design.
+
+
+The servers should be run from 64-bit linux hosts. Our production distribution is RHEL 7.2.
+
+Required python packages are as follows:
+
+| Package              | Version    |
+|:---------------------|:-----------|
+| python-mimeparse     | 1.6.0      |
+| setuptools           | 28.8.0     |
+| six                  | 1.10.0     |
+| python-dateutil      | 2.6.0      |
+| psycopg2             | 2.7        |
+| lxml                 | 3.7.3      |
+| django-tastypie      | 0.13.3     |
+| defusedxml           | 0.5.0      |
+| django-cors-headers  | 2.0.2      |
+| requests             | 2.13.0     |
+| ipaddress            | 1.0.18     |
+
+We use Tastypie to generate a RESTful API for Django which can be referenced by our Angular frontend. Tastypie requires the XML packages lxml and defusedxml to serve XML data as a response. We use the Django-CORS-headers package to configure CORS requests between our frontend and backend servers in development. The package psycopg2 is used to link PostgreSQL to Django.
+
+# Documentation
+Documentation for the various frameworks, packages, and components discussed above can be found at the following locations:
+
+| Framework/Service | Package                            | Documentation 
+|:------------------|:-----------------------------------|:--------------
+| Node              | node                               | https://nodejs.org/docs/v7.7.0/api/
+| NPM               | npm                                | https://docs.npmjs.com/
+| PostgreSQL        | postgres9.6                        | https://www.postgresql.org/docs/9.6/static/
+| NGINX             | nginx                              | https://nginx.org/en/docs/
+| uWSGI             | uwsgi                              | https://uwsgi-docs.readthedocs.io/en/latest/
+| Python            | python3.6                          | https://docs.python.org/3.6/
+| Python            | setuptools                         | https://setuptools.readthedocs.io/en/latest/
+| Python            | pip                                | https://pip.pypa.io/en/stable/
+| Django            | Django                             | https://docs.djangoproject.com/en/1.10/
+| Django            | six                                | https://pythonhosted.org/six/
+| Django            | python-mimeparse                   | https://pypi.python.org/pypi/python-mimeparse
+| Django            | python-dateutil                    | https://dateutil.readthedocs.io/en/stable/
+| Django            | psycopg2                           | https://initd.org/psycopg/docs/
+| Django            | django-cors-headers                | https://pypi.python.org/pypi/django-cors-headers/2.0.1
+| Django            | django-tastypie                    | https://django-tastypie.readthedocs.io/en/latest/
+| Django            | lxml                               | https://lxml.de/3.7/lxmldoc-3.7.2.pdf
+| Django            | defusedxml                         | https://pypi.python.org/pypi/defusedxml/
+| Django            | requests                           | https://docs.python-requests.org/en/master/
+| Django            | ipaddress                          | https://docs.python.org/3/library/ipaddress.html
+
+| Angular           | @angular/cli                       | https://github.com/angular/angular-cli/wiki
+| Angular           | @angular/core                      | https://angular.io/docs/ts/latest/
+| Angular           | @angular/flex-layout               | https://github.com/angular/flex-layout/wiki/API-Documentation
+| Angular           | @angular/forms                     | https://angular.io/docs/ts/latest/api/#!?query=forms
+| Angular           | @angular/http                      | https://angular.io/docs/ts/latest/api/#!?query=http
+| Angular           | @angular/material                  | https://material.angular.io/components
+| Angular           | @angular/router                    | https://angular.io/docs/ts/latest/guide/router.html
+
+## Installation
+Run the script `./install.sh` to create a clean and complete installation of our environment. This has been tested on Fedora 25, Debian 8, and RHEL 7.2 and works out-of-the-box to install everything needed. Please file any issues encountered as GitHub issues, and they will be addressed.
+
+In general, in the package listings above, things in the framework/services category should be installed with your system's package manager (`apt-get`, `yum`, `dnf`, `pacman`, etc.), those which are listed as angular modules should be installed with `npm install` and those which are listed as python packages should be installed with `pip install`.
+
+## Development Server
+Simply run the script `./start.sh` to initialize the database, frontend, and backend. Run `./start.sh a` to initialize everything except for our Angular frontend â€” this is useful for debugging backend API calls without the overhead of starting up the Angular server. 
+
+To initialize the various components separately:
+
+#### Package versioning:
+Run `./utils/env-check.sh` to check the versions of various packages are up to date.
+
+#### Stopping running instances:
+Run `./stop.sh` to halt any running Angular, Django, PostgreSQL, NGINX, and uWSGI processes.
+
+#### Starting database:
+Run `./utils/start_db.sh` to initialize PostgreSQL.
+
+#### Make Django Migrations:
+Run `./backend/migrate.sh` to make the Django migrations which create the relevant tables in the database for our project.
+
+#### Populate Database with Test Data:
+Run `psql -d postgres -U postgres < ./utils/recreate_database.sql` to fill the database with some test values.
+
+#### Reload Django Counters with Test Data:
+Django expects that all primary keys are created by it, but we've added some to the database manually. To have Django reset its sequence counters by finding the maximum ID in the primary key column for each table and incrementing from there, run the following:
+```
+sql_c=$(python3.6 ./backend/manage.py sqlsequencereset cardcontrol)
+echo "${sql_c}" | psql -d cardcontrol -U postgres
+```
+
+#### Start Django Backend Server
+Run `python3.6 $d/backend/manage.py runserver` to initialize Django.
+
+#### Start Angular
+`ng serve`
 
 ## Code scaffolding
 
@@ -20,8 +141,4 @@ Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.
 Run `ng e2e` to execute the end-to-end tests via [Protractor](http://www.protractortest.org/).
 Before running the tests make sure you are serving the app via `ng serve`.
 
-## Further help
-
-To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI README](https://github.com/angular/angular-cli/blob/master/README.md).
-
-
+In the README.md file at the root of your team's private repository, list all packages, APIs, and dependencies that are used --and link to each dependency's developer documentation
diff --git a/TODO.md b/TODO.md
index b95712b..5e7e576 100644
--- a/TODO.md
+++ b/TODO.md
@@ -1,14 +1,28 @@
 #TODO:
 ###High Prority:
-* add main page link to admin portal
+# Matt
+* README
+* Get deploy working in production with a GitHub webhook
+* Edit schemas to limit duplicate values
+* Write technical writing API guide
+
+# Adam
+* Start working on manager API workflows
+* Link workflows with a shiny new UI
 
 ###Medium Priority:
-* Add web applications (halliganhelper, etc.)
+* Move to production
+* Static optimization of Angular
+* nginx compression
 
 ###Low Priority:
+* Provide back link from manager page to user page
+* Create good test data set including web applications, etc.
 
 ###Stretch Goals:
-* lost and found
+* Lost & Found
+* Authentication
+* Test on mobile
 
 
 
diff --git a/backend/backend/settings.py b/backend/backend/settings.py
index f301c23..8e4ceed 100644
--- a/backend/backend/settings.py
+++ b/backend/backend/settings.py
@@ -19,14 +19,12 @@ BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
 # Quick-start development settings - unsuitable for production
 # See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/
 
-# SECURITY WARNING: keep the secret key used in production secret!
 SECRET_KEY = '(re*3(5*y596^l9!j($tq09@!^(ooam(2@-no9%b#fzl4q_pl8'
+GITHUB_WEBHOOK_KEY = '4QrbY8lhgwh7cwo6XuyUQguqhE8UtGk83ouruCgYV83p4GPpP3lxGSwBq8mQztPl'
 
-# SECURITY WARNING: don't run with debug turned on in production!
-DEBUG = True
-
-ALLOWED_HOSTS = ['34.193.86.61', 'ec2-52-90-73-231.compute-1.amazonaws.com', '127.0.0.1', 'localhost']
+DEBUG = False
 
+ALLOWED_HOSTS = ['34.193.86.61', '127.0.0.1', 'localhost']
 
 # Application definition
 
@@ -59,10 +57,7 @@ CORS_ORIGIN_ALLOW_ALL=True
 #)
 
 CORS_ALLOW_METHODS = (
-    'DELETE',
     'GET',
-    'OPTIONS',
-    'PATCH',
     'POST',
     'PUT',
 )
diff --git a/backend/backend/urls.py b/backend/backend/urls.py
index d57a66d..3e723d4 100644
--- a/backend/backend/urls.py
+++ b/backend/backend/urls.py
@@ -16,17 +16,21 @@ Including another URLconf
 from django.conf.urls import include, url
 from django.contrib import admin
 from tastypie.api import Api
-from cardcontrol.api import ManagerAccountResource, UserAccountResource, CardResource, DoorResource, RequestResource
+from cardcontrol.api import UserAccountResource, CardResource, AccessPointResource, ResourceResource, DomainResource, RequestResource
+from backend import views
 
 v1_api = Api(api_name='v1')
-v1_api.register(ManagerAccountResource())
 v1_api.register(UserAccountResource())
 v1_api.register(CardResource())
-v1_api.register(DoorResource())
+v1_api.register(AccessPointResource())
 v1_api.register(RequestResource())
+v1_api.register(ResourceResource())
+v1_api.register(DomainResource())
+
 
 urlpatterns = [
     url(r'', include('cardcontrol.urls')),
     url(r'^admin/', admin.site.urls),
-    url(r'^api/', include(v1_api.urls))
+    url(r'^api/', include(v1_api.urls)),
+    url(r'^hook/$', views.hook, name='hook')
 ]
diff --git a/backend/backend/views.py b/backend/backend/views.py
new file mode 100644
index 0000000..6a50f59
--- /dev/null
+++ b/backend/backend/views.py
@@ -0,0 +1,50 @@
+import hmac
+from hashlib import sha1
+
+from django.conf import settings
+from django.http import HttpResponse, HttpResponseForbidden, HttpResponseServerError
+from django.views.decorators.csrf import csrf_exempt
+from django.views.decorators.http import require_POST
+from django.utils.encoding import force_bytes
+
+import requests
+from ipaddress import ip_address, ip_network
+import subprocess
+import json
+
+# From: https://simpleisbetterthancomplex.com/tutorial/2016/10/31/how-to-handle-github-webhooks-using-django.html
+
+@require_POST
+@csrf_exempt
+def hook(request):
+    # Verify the request signature
+    header_signature = request.META.get('HTTP_X_HUB_SIGNATURE')
+    if header_signature is None:
+        return HttpResponseForbidden('Permission denied.')
+
+    sha_name, signature = header_signature.split('=')
+    if sha_name != 'sha1':
+        return HttpResponseServerError('Operation not supported.', status=501)
+
+    mac = hmac.new(force_bytes(settings.GITHUB_WEBHOOK_KEY), msg=force_bytes(request.body), digestmod=sha1)
+    if not hmac.compare_digest(force_bytes(mac.hexdigest()), force_bytes(signature)):
+        return HttpResponseForbidden('Permission denied.')
+
+    # If request reached this point we are in a good shape
+    # Process the GitHub events
+    event = request.META.get('HTTP_X_GITHUB_EVENT', 'ping')
+
+
+    if event == 'ping':
+        return HttpResponse('pong')
+    elif event == 'push':
+        jdict = json.loads(request.body)
+        if jdict['ref'] != "refs/heads/deploy":
+            return HttpResponse(jdict['ref'], status=204)
+        bash_c = "sudo -u ec2-user /home/ec2-user/cardcontrol/deploy.sh &"
+        process = subprocess.Popen(bash_c.split(), stdout=subprocess.PIPE)
+        output, error = process.communicate()
+        return HttpResponse('success')    
+
+    # In case we receive an event that's not ping or push
+    return HttpResponse("request object not recognized", status=204)
diff --git a/backend/cardcontrol/admin.py b/backend/cardcontrol/admin.py
index 3d0579c..7a4d69c 100644
--- a/backend/cardcontrol/admin.py
+++ b/backend/cardcontrol/admin.py
@@ -1,9 +1,10 @@
 from django.contrib import admin
 
-from .models import ManagerAccount, UserAccount, Door, Card, Request
+from .models import UserAccount, AccessPoint, Card, Request, Resource, Domain
 
-admin.site.register(ManagerAccount)
 admin.site.register(UserAccount)
-admin.site.register(Door)
+admin.site.register(AccessPoint)
 admin.site.register(Card)
 admin.site.register(Request)
+admin.site.register(Resource)
+admin.site.register(Domain)
diff --git a/backend/cardcontrol/api.py b/backend/cardcontrol/api.py
index cfc1b97..2488cb4 100644
--- a/backend/cardcontrol/api.py
+++ b/backend/cardcontrol/api.py
@@ -1,66 +1,138 @@
-from cardcontrol.models import ManagerAccount, UserAccount, Card, Door, Request
-from tastypie.resources import ModelResource
+from cardcontrol.models import UserAccount, Card, AccessPoint, Request, Resource
+from tastypie.resources import ModelResource, NamespacedModelResource
 from tastypie.authorization import Authorization
-from tastypie.resources import ModelResource, ALL, ALL_WITH_RELATIONS
-from tastypie import fields, utils
+from tastypie.resources import ALL, ALL_WITH_RELATIONS
+from tastypie.exceptions import NotFound
+from tastypie import fields
+from tastypie.fields import ToManyField
+from tastypie.exceptions import BadRequest
+
+
+class CardResource(ModelResource):
+
+    def get_schema(self, request, **kwargs):
+        raise NotFound
 
-class ManagerAccountResource(ModelResource):
     class Meta:
-        queryset = ManagerAccount.objects.all()
-        resource_name = 'manager_account'
+        always_return_data = True 
+        queryset = Card.objects.all()
+        list_allowed_methods = ['get', 'put', 'post']
+        detail_allowed_methods = ['get', 'put', 'post']
+        resource_name = 'card'
         authorization = Authorization()
+        excludes = ['created_at', 'modified_at']
         filtering = {
-            'utln': ALL,
-            'manager_level' : ALL
+            'utln': ALL
         }
 
+
 class UserAccountResource(ModelResource):
-    created_by = fields.ToOneField(ManagerAccountResource, 'created_by')
-    modified_by = fields.ToOneField(ManagerAccountResource, 'modified_by')
+    card = fields.ToOneField('cardcontrol.api.CardResource', 'card')
+    access_points = fields.ManyToManyField('cardcontrol.api.AccessPointResource', 'access_points')
+    resources_managed = fields.ManyToManyField('cardcontrol.api.ResourceResource', 'resources_managed')
+
+    def get_schema(self, request, **kwargs):
+        raise NotFound
 
     class Meta:
         queryset = UserAccount.objects.all()
+        list_allowed_methods = ['get']
+        detail_allowed_methods = ['get']
         resource_name = 'user_account'
         authorization = Authorization()
+        excludes = ['created_at', 'modified_at']
+        filtering = {
+            'utln': ALL_WITH_RELATIONS,
+            'manager_level': ALL
+        }
+
+class ResourceResource(ModelResource):
+    created_by = fields.ToOneField(UserAccountResource, 'created_by')
+    modified_by = fields.ToOneField(UserAccountResource, 'modified_by')
+
+    class Meta:
+        always_return_data = True
+        queryset = Resource.objects.all()
+        list_allowed_methods = ['get', 'put', 'post']
+        resource_name = 'resource'
+        detail_allowed_methods = ['get', 'put', 'post']
+        authorization = Authorization()
         excludes = ['created_by', 'modified_by', 'created_at', 'modified_at']
         filtering = {
-            'utln': ALL
+            'city': ALL,
+            'zipcode': ALL,
+            'address': ALL,
+            'state': ALL,
+            'country': ALL,
+            'resource_name': ALL
         }
 
-class CardResource(ModelResource):
-    created_by = fields.ToOneField(ManagerAccountResource, 'created_by')
-    modified_by = fields.ToOneField(ManagerAccountResource, 'modified_by')
+
+class DomainResource(ModelResource):
+    created_by = fields.ToOneField(UserAccountResource, 'created_by')
+    modified_by = fields.ToOneField(UserAccountResource, 'modified_by')
+    resources = fields.ManyToManyField('cardcontrol.api.ResourceResource', 'resources')
+    domains = fields.ManyToManyField('cardcontrol.api.DomainResource', 'domains')
+
     class Meta:
-        queryset = Card.objects.all()
-        resource_name = 'card'
+        always_return_data = True
+        queryset = Resource.objects.all()
+        list_allowed_methods = ['get', 'put', 'post']
+        resource_name = 'domain'
+        detail_allowed_methods = ['get', 'put', 'post']
         authorization = Authorization()
         excludes = ['created_by', 'modified_by', 'created_at', 'modified_at']
         filtering = {
-            'utln': ALL,
-            'doors' : ALL_WITH_RELATIONS
+            'domain_name': ALL
         }
 
-class DoorResource(ModelResource):
-    created_by = fields.ToOneField(ManagerAccountResource, 'created_by')
-    modified_by = fields.ToOneField(ManagerAccountResource, 'modified_by')
+class AccessPointResource(ModelResource):
+
+    created_by = fields.ToOneField(UserAccountResource, 'created_by')
+    modified_by = fields.ToOneField(UserAccountResource, 'modified_by')
+    resource = fields.ToOneField(ResourceResource, 'resource')
+
+    def get_schema(self, request, **kwargs):
+        raise NotFound
+
     class Meta:
-        queryset = Door.objects.all()
-        resource_name = 'door'
+        always_return_data = True 
+        queryset = AccessPoint.objects.all()
+        list_allowed_methods = ['get', 'put', 'post']
+        resource_name = 'access_point'
+        detail_allowed_methods = ['get', 'put', 'post']
         authorization = Authorization()
         excludes = ['created_by', 'modified_by', 'created_at', 'modified_at']
         filtering = {
-            'address': ALL,
-            'building_name' : ALL,
-            'door_name' : ALL
+            'resource': ALL_WITH_RELATIONS,
+            'access_point_name': ALL
         }
 
+
 class RequestResource(ModelResource):
-    created_by = fields.ToOneField(ManagerAccountResource, 'created_by')
-    modified_by = fields.ToOneField(ManagerAccountResource, 'modified_by')
+
+    created_by = fields.ToOneField(UserAccountResource, 'created_by')
+    modified_by = fields.ToOneField(UserAccountResource, 'modified_by')
+    new_card = fields.ToOneField(CardResource, 'new_card')
+    new_access_points = fields.ManyToManyField('cardcontrol.api.AccessPointResource', 'new_access_points')
+    user = fields.ToOneField(UserAccountResource, 'user')
+
+    def get_schema(self, request, **kwargs):
+        raise NotFound
+
     class Meta:
+        always_return_data = True 
         queryset = Request.objects.all()
+        list_allowed_methods = ['get', 'put', 'post']
+        detail_allowed_methods = ['get', 'put', 'post']
         resource_name = 'request'
         authorization = Authorization()
-        excludes = ['created_by', 'modified_by', 'created_at', 'modified_at']
-        
 
+        excludes = ['created_by', 'modified_by']
+        filtering = {
+            'created_at': ALL,
+            'modified_at': ALL,
+            'user': ALL_WITH_RELATIONS,
+            'request_level': ALL_WITH_RELATIONS,
+            'status': ALL_WITH_RELATIONS
+        }
diff --git a/backend/cardcontrol/models.py b/backend/cardcontrol/models.py
index 68f72c8..34b1b79 100644
--- a/backend/cardcontrol/models.py
+++ b/backend/cardcontrol/models.py
@@ -1,30 +1,5 @@
 from django.db import models
-
-class ManagerAccount(models.Model):
-    first_name = models.CharField(max_length=40)
-    last_name = models.CharField(max_length=40)
-    utln = models.CharField(max_length=10, unique=True)
-    manager_level = models.IntegerField(default=0)
-    class Meta:
-        app_label = 'cardcontrol'
-
-    def __str__(self):
-        return self.utln
-
-class Door(models.Model):
-    address = models.CharField(max_length=120)
-    building_name = models.CharField(max_length=120)
-    door_name = models.CharField(max_length=120)
-    created_by = models.ForeignKey(ManagerAccount, on_delete=models.CASCADE, related_name='%(class)s_created_by')
-    modified_by = models.ForeignKey(ManagerAccount, on_delete=models.CASCADE, related_name='%(class)s_modified_by')
-    created_at = models.DateTimeField(auto_now_add=True)
-    modified_at = models.DateTimeField(auto_now=True)
-    class Meta:
-        app_label = 'cardcontrol'
-        unique_together = ('address', 'building_name', 'door_name')
-
-    def __str__(self):
-        return self.door_name + " @ " + self.building_name
+import datetime
 
 class Card(models.Model):
     first_name = models.CharField(max_length=40)
@@ -37,13 +12,11 @@ class Card(models.Model):
     school = models.CharField(max_length=30)
     class_year = models.IntegerField()
     barcode = models.IntegerField()
-    doors = models.ManyToManyField(Door)
-    created_by = models.ForeignKey(ManagerAccount, on_delete=models.CASCADE, related_name='%(class)s_created_by')
-    modified_by = models.ForeignKey(ManagerAccount, on_delete=models.CASCADE, related_name='%(class)s_modified_by')
-    created_at = models.DateTimeField(auto_now_add=True)
-    modified_at = models.DateTimeField(auto_now=True)
+    created_at = models.DateTimeField(default=datetime.datetime.now, editable=False)
+    modified_at = models.DateTimeField(default=datetime.datetime.now)
     class Meta:
         app_label = 'cardcontrol'
+        unique_together = ('first_name', 'last_name', 'middle_initial', 'utln', 'student_type', 'jumbocash_id', 'birth_date', 'school', 'class_year', 'barcode')
 
     def __str__(self):
         return self.utln
@@ -53,26 +26,84 @@ class UserAccount(models.Model):
     last_name = models.CharField(max_length=40)
     utln = models.CharField(max_length=10, unique=True)
     card = models.ForeignKey(Card, on_delete=models.CASCADE)
-    created_by = models.ForeignKey(ManagerAccount, on_delete=models.CASCADE, related_name='%(class)s_created_by')
-    modified_by = models.ForeignKey(ManagerAccount, on_delete=models.CASCADE, related_name='%(class)s_modified_by')
+    access_points = models.ManyToManyField('AccessPoint', blank=True)
+    resources_managed = models.ManyToManyField('Resource', blank=True)
     created_at = models.DateTimeField(auto_now_add=True)
-    modified_at = models.DateTimeField(auto_now=True)
+    modified_at = models.DateTimeField(default=datetime.datetime.now)
+    manager_level = models.IntegerField(default=0)
     class Meta:
         app_label = 'cardcontrol'
 
     def __str__(self):
         return self.utln
 
+class Resource(models.Model):
+    zipcode = models.CharField(max_length=10)
+    address = models.CharField(max_length=120)
+    city = models.CharField(max_length=120)
+    state = models.CharField(max_length=120)
+    country = models.CharField(max_length=120)
+    resource_name = models.CharField(max_length=120)
+    created_by = models.ForeignKey(UserAccount, on_delete=models.CASCADE, related_name='%(class)s_created_by')
+    modified_by = models.ForeignKey(UserAccount, on_delete=models.CASCADE, related_name='%(class)s_modified_by')
+    created_at = models.DateTimeField(default=datetime.datetime.now, editable=False)
+    modified_at = models.DateTimeField(default=datetime.datetime.now)
+    class Meta:
+        app_label = 'cardcontrol'
+        unique_together = ('zipcode', 'address', 'city', 'resource_name')
+
+    def __str__(self):
+        return self.building_name
+
+class Domain(models.Model):
+    domain_name = models.CharField(max_length=120, unique=True)
+    resources = models.ManyToManyField('Resource', blank=True)    
+    domains = models.ManyToManyField('self', blank=True)
+    created_by = models.ForeignKey(UserAccount, on_delete=models.CASCADE, related_name='%(class)s_created_by')
+    modified_by = models.ForeignKey(UserAccount, on_delete=models.CASCADE, related_name='%(class)s_modified_by')
+    created_at = models.DateTimeField(default=datetime.datetime.now, editable=False)
+    modified_at = models.DateTimeField(default=datetime.datetime.now)
+    class Meta:
+        app_label = 'cardcontrol'
+
+    def __str__(self):
+        return self.building_name
+
+class AccessPoint(models.Model):
+    resource = models.ForeignKey(Resource, on_delete=models.CASCADE)
+    access_point_name = models.CharField(max_length=120)
+    created_by = models.ForeignKey(UserAccount, on_delete=models.CASCADE, related_name='%(class)s_created_by')
+    modified_by = models.ForeignKey(UserAccount, on_delete=models.CASCADE, related_name='%(class)s_modified_by')
+    created_at = models.DateTimeField(default=datetime.datetime.now, editable=False)
+    modified_at = models.DateTimeField(default=datetime.datetime.now)
+    class Meta:
+        app_label = 'cardcontrol'
+        unique_together = ('resource', 'access_point_name')
+
+    def __str__(self):
+        return self.access_point_name + " @ " + self.building_name
+
 class Request(models.Model):
     user = models.ForeignKey(UserAccount, on_delete=models.CASCADE)
-    new_card = models.ForeignKey(Card, on_delete=models.CASCADE)
-    new_doors = models.ManyToManyField(Door)
-    created_by = models.ForeignKey(ManagerAccount, on_delete=models.CASCADE, related_name='%(class)s_created_by')
-    modified_by = models.ForeignKey(ManagerAccount, on_delete=models.CASCADE, related_name='%(class)s_modified_by')
-    created_at = models.DateTimeField(auto_now_add=True)
-    modified_at = models.DateTimeField(auto_now=True)
+    new_card = models.ForeignKey(Card, on_delete=models.CASCADE, null=True, blank=True)
+    new_access_points = models.ManyToManyField(AccessPoint, blank=True)
+    request_level = models.IntegerField()
+    status = models.IntegerField()
+    reason = models.CharField(max_length=200, null=True, blank=True)
+    feedback = models.CharField(max_length=200, null=True, blank=True)
+    created_by = models.ForeignKey(UserAccount, on_delete=models.CASCADE, related_name='%(class)s_created_by')
+    modified_by = models.ForeignKey(UserAccount, on_delete=models.CASCADE, related_name='%(class)s_modified_by')
+    created_at = models.DateTimeField(default=datetime.datetime.now, editable=False)
+    modified_at = models.DateTimeField(default=datetime.datetime.now)
     class Meta:
         app_label = 'cardcontrol'
+    
+#    def apply_filters(self, request, applicable_filters):
+#        distinct = request.GET.get('distinct', False) == 'True'
+#        if distinct:
+#            return self.get_object_list(request).filter(**applicable_filters).distinct()
+#        else:
+#            return self.get_object_list(request).filter(**applicable_filters)
 
     def __str__(self):
         return self.user
diff --git a/backend/migrate.sh b/backend/migrate.sh
index 72d301e..1f07ce0 100755
--- a/backend/migrate.sh
+++ b/backend/migrate.sh
@@ -23,7 +23,9 @@ python3.6 $d/manage.py migrate admin --database default
 python3.6 $d/manage.py migrate contenttypes --database default
 python3.6 $d/manage.py migrate sessions --database default
 python3.6 $d/manage.py migrate tastypie --database default
+set +e
 python3.6 $d/manage.py migrate cardcontrol --database cardcontrol
+set -e
 #echo "Creating new superuser for Django admin panel."
 #python3.6 $d/manage.py createsuperuser
 
diff --git a/backend/requirements.txt b/backend/requirements.txt
new file mode 100644
index 0000000..901cf5b
--- /dev/null
+++ b/backend/requirements.txt
@@ -0,0 +1,13 @@
+defusedxml==0.5.0
+dj-database-url==0.4.2
+Django==1.10.5
+django-cors-headers==2.0.2
+django-tastypie==0.13.3
+lxml==3.7.3
+psycopg2==2.7.1
+python-dateutil==2.6.0
+python-mimeparse==1.6.0
+six==1.10.0
+ipaddress==1.0.18
+requests==2.13.0
+uWSGI==2.0.15
diff --git a/backend/uwsgi.ini b/backend/uwsgi.ini
new file mode 100644
index 0000000..a38745c
--- /dev/null
+++ b/backend/uwsgi.ini
@@ -0,0 +1,22 @@
+# mysite_uwsgi.ini file
+[uwsgi]
+
+# Django-related settings
+# the base directory (full path)
+chdir           = /home/ec2-user/cardcontrol/backend/
+# Django's wsgi file
+module          = backend.wsgi
+# home            = /home/ec2-user/cardcontrol/backend/backend/
+
+# process-related settings
+# master
+master          = true
+# maximum number of worker processes
+processes       = 25
+# the socket (use the full path to be safe
+socket          = /cardcontrol.sock
+# ... with appropriate permissions - may be needed
+chmod-socket    = 666
+# clear environment on exit
+vacuum          = true
+
diff --git a/backend/uwsgi_params b/backend/uwsgi_params
new file mode 100644
index 0000000..5ec282a
--- /dev/null
+++ b/backend/uwsgi_params
@@ -0,0 +1,17 @@
+uwsgi_param  QUERY_STRING       $query_string;
+uwsgi_param  REQUEST_METHOD     $request_method;
+uwsgi_param  CONTENT_TYPE       $content_type;
+uwsgi_param  CONTENT_LENGTH     $content_length;
+
+uwsgi_param  REQUEST_URI        $request_uri;
+uwsgi_param  PATH_INFO          $document_uri;
+uwsgi_param  DOCUMENT_ROOT      $document_root;
+uwsgi_param  SERVER_PROTOCOL    $server_protocol;
+uwsgi_param  REQUEST_SCHEME     $scheme;
+uwsgi_param  HTTPS              $https if_not_empty;
+
+uwsgi_param  REMOTE_ADDR        $remote_addr;
+uwsgi_param  REMOTE_PORT        $remote_port;
+uwsgi_param  SERVER_PORT        $server_port;
+uwsgi_param  SERVER_NAME        $server_name;
+
diff --git a/cardcontrol_nginx.conf b/cardcontrol_nginx.conf
new file mode 100644
index 0000000..896fc4b
--- /dev/null
+++ b/cardcontrol_nginx.conf
@@ -0,0 +1,62 @@
+# cardcontrol_nginx.conf
+
+# configuration of the server
+gzip on;
+gzip_static on;
+gzip_comp_level 2;
+gzip_http_version 1.0;
+gzip_proxied any;
+gzip_min_length 256;
+gzip_buffers 16 8k;
+gzip_types text/plain text/html text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript;
+gzip_disable "msie6";
+gzip_vary on;
+root /dist/;
+index index.html;
+# the upstream component nginx needs to connect to
+upstream django {
+     server unix:///cardcontrol.sock; 
+}
+
+server {
+    # the port your site will be served on
+    listen      80;
+    # the domain name it will serve for
+    server_name 34.193.86.61;
+
+    location /hook {
+        uwsgi_pass django;
+        include /home/ec2-user/cardcontrol/backend/uwsgi_params;
+    }
+
+    location /api/v1 {
+        uwsgi_pass django;
+        include /home/ec2-user/cardcontrol/backend/uwsgi_params;
+    }
+
+    location /api {
+	proxy_pass http://localhost:6419/;
+    }
+
+    location /__/grip {
+        proxy_pass http://localhost:6419;
+    }
+
+    location ~ ^/(scripts.*js|styles|images) {
+        gzip_static on;
+        expires 1y;
+        add_header Cache-Control public;
+        add_header ETag "";
+        break;
+  }
+
+#    location / {
+#        try_files $uri $uri/ =404;
+        #proxy_pass http://localhost:4200;
+        #proxy_http_version 1.1;
+        #proxy_set_header Upgrade $http_upgrade;
+        #proxy_set_header Connection 'upgrade';
+        #proxy_cache_bypass $http_upgrade;
+#    }
+
+}
diff --git a/deploy.log b/deploy.log
new file mode 100644
index 0000000..0fb35e0
--- /dev/null
+++ b/deploy.log
@@ -0,0 +1,6 @@
+[2017-04-06:08:30:35]: Attempted to pull.
+[2017-04-06:09:02:36]: Attempted to pull.
+[2017-04-06:09:02:31]: Starting deployment.
+From github.com:tuftsdev/comp120-s2017-team6
+ * branch            deploy     -> FETCH_HEAD
+[2017-04-06:12:37:58]: Attempted to pull.
diff --git a/deploy.sh b/deploy.sh
new file mode 100755
index 0000000..4538665
--- /dev/null
+++ b/deploy.sh
@@ -0,0 +1,22 @@
+#!/bin/bash
+echo "[$(date +%Y-%m-%d:%H:%M:%S)]: Starting deployment." >> /home/ec2-user/cardcontrol/deploy.log
+
+cd /home/ec2-user/cardcontrol
+
+sleep 5
+
+es=$(sudo -u ec2-user git status -uno | wc -l)
+
+if [[ "$es" == "2" ]]; then
+        echo "[$(date +%Y-%m-%d:%H:%M:%S)]: No updates found." >> /home/ec2-user/cardcontrol/deploy.log
+        exit 1
+fi
+
+sudo -u ec2-user bash /home/ec2-user/cardcontrol/stop.sh 2>> /home/ec2-user/cardcontrol/deploy.log
+sudo -u ec2-user git stash 2>> /home/ec2-user/cardcontrol/deploy.log
+sudo -u ec2-user git checkout deploy && git pull origin deploy 2>> /home/ec2-user/cardcontrol/deploy.log
+sudo -u ec2-user bash /home/ec2-user/cardcontrol/start.sh 2>> /home/ec2-user/cardcontrol/deploy.log
+
+echo "[$(date +%Y-%m-%d:%H:%M:%S)]: Attempted to pull." >> /home/ec2-user/cardcontrol/deploy.log
+
+
diff --git a/doc/api.md b/doc/api.md
new file mode 100644
index 0000000..9e8c9b6
--- /dev/null
+++ b/doc/api.md
@@ -0,0 +1,476 @@
+
+# Introduction
+
+Hello! Welcome to the CardControl API. This interface allows you to interact with your ID card directly, submitting critical requests from the comfort of your own environment, or wrapping our service in a more convenient form. The following serves as documentation for our API, and will hopefully guide you well in your access control ventures. 
+
+
+### Notes
+
+* The current production URL of our service is http://34.193.86.61/. All paths referenced in the following documentation should be appended to that URL.
+
+* Our production URL is subject to change as our still-developing architecture evolves, but the relative paths referenced here are guaranteed for our users.
+
+
+# Structure of the API
+
+Our API has a single main endpoint at `/api/` which is a reference to this documentation. This supports only a simple `GET` request, as it is simply documentation for the API to follow.
+
+We maintain a versioning system for the API. For now, there exists an endpoint `/api/v1/` where the CardControl API is running â€” in the future, we may add other API versions with different support and different interfaces.
+
+The API has six major components. Each supports different operations. They are as follows:
+
+|  Module         | Allowed Methods |
+|-----------------|-----------------|
+| card            | GET, PUT, POST  |
+| user_account    | GET             |
+| access_point    | GET, PUT, POST  |
+| resource        | GET, PUT, POST  |
+| request         | GET, PUT, POST  |
+
+The use and description of each component will be in the following six sections.
+
+The data returned from or sent to a given API endpoint can be either JSON or XML. To change the format when making a request from the browser, the parameter `?format=json` or `?format=xml` can be appended to any endpoint on any `GET` request to force the API to ignore HTTP headers and return a given format.
+
+In the documentation below, the `$` symbol will be used to denote variable values; for example the string `$utln` will be used to denote the UTLN of a given user, which could be e.g. `jsmith01` or `mredis05`, or the variable `$id` could be the integer `1`, `2`, or `438`. 
+
+We use a system of queries to filter responses by a given attribute. The root path to a component, e.g. `/api/v1/request/` can be followed by the symbol `?` to filter all requests by a set of allowed values documented below.
+
+## Card
+
+A card is an object representing the physical ID card each system user holds. It contains all relevant text fields one would find on the card. The relevant methods are as follows:
+
+### GET /api/v1/card/`$id`
+
+Returns the card with a given ID. This is not the card ID of the institution, but rather a unique identifier beginning from 1, identifying cards within the CardControl system.
+
+|  Field          | Value Type      | Description                                                      | Example                 |
+|-----------------|-----------------|------------------------------------------------------------------|-------------------------|
+| barcode         | INT             | The numeric barcode value of the ID.                             | 123456789               |
+| birth_date      | DATETIME        | The bithdate of the card owner.                                  | 1996-04-06              |
+| class_year      | INT             | The class year of the card owner. Must be a 4-digit integer.     | 2017                    |
+| first_name      | STRING          | The first name of the card owner.                                | John                    |
+| last_name       | STRING          | The last name of the card owner.                                 | Smith                   |
+| middle_initial  | CHAR            | The middle initial of the card owner. Must be a single character.| A                       |
+| jumbocash_id    | INT             | The campus money system ID of the card owner.                    | 987654321               |
+| school          | STRING          | The school within the university to which the card owner belongs.| Liberal Arts            |
+| student_type    | STRING          | The type of community member the card owner is.                  | Graduate                |
+| utln            | STRING          | The UTLN of the card owner.                                      | jsmith01                |
+| id              | INT             | Has value $id.                                                   | 1                       |
+| resource_uri    | STRING          | Has value '/api/v1/card/$id'.                                    | /api/v1/card/1          |
+
+An example JSON object is as follows:
+
+```
+{
+  "barcode": 0,
+  "birth_date": "1996-10-02",
+  "class_year": 2019,
+  "first_name": "Harrison",
+  "id": 1,
+  "jumbocash_id": 111222333,
+  "last_name": "Kaiser",
+  "middle_initial": "M",
+  "resource_uri": "/api/v1/card/1/",
+  "school": "Liberal Arts",
+  "student_type": "Undergraduate",
+  "utln": "hkaise01"
+}
+```
+
+### GET /api/v1/card?utln=`$utln`
+
+Returns all available cards in a list format. In JSON, this is an array. The card objects are exactly as above. Users are only allowed access to cards which match their UTLN, and as such this method is only allowed if the user is authenticated and $utln is equal to that user's UTLN.
+
+### POST/PUT /api/v1/card
+
+Sends a new card object to be created in the database. This will only work if the UTLN of the user_account sending the request is equal to the card's UTLN, or if the user account in question is a manager.
+
+The object to be send should have the following fields. Any additional fields will be ignored.
+
+|  Field          | Value Type      | Description                                                      | Example                 |
+|-----------------|-----------------|------------------------------------------------------------------|-------------------------|
+| barcode         | INT             | The numeric barcode value of the ID.                             | 123456789               |
+| birth_date      | DATETIME        | The bithdate of the card owner.                                  | 1996-04-06              |
+| class_year      | INT             | The class year of the card owner. Must be a 4-digit integer.     | 2017                    |
+| first_name      | STRING          | The first name of the card owner.                                | John                    |
+| last_name       | STRING          | The last name of the card owner.                                 | Smith                   |
+| middle_initial  | CHAR            | The middle initial of the card owner. Must be a single character.| A                       |
+| jumbocash_id    | INT             | The campus money system ID of the card owner.                    | 987654321               |
+| school          | STRING          | The school within the university to which the card owner belongs.| Liberal Arts            |
+| student_type    | STRING          | The type of community member the card owner is.                  | Graduate                |
+| utln            | STRING          | The UTLN of the card owner.                                      | jsmith01                |
+
+The header of the HTTP request must match the format of the data being sent, and that format must be either JSON or XML. 
+
+## User Account
+
+A user account is the primary means by which users interact with the system. Each user has a user account with a unique UTLN, and this identifies the user across the system. A user account posesses a card, an access level, and a set of resources, domains, and access points to which that user has access. A card is considered 'active' if and only if the user_account with the same UTLN has its card reference set to that card.
+
+For security reasons, until Authentication is fully implemented, all HTTP methods except for GET are disabled for user accounts, making them read-only.
+
+### GET /api/v1/user_account/`$id`
+
+Returns the user account with the given ID. A manager level is an integer corresponding to how much system control a given user has. A manager level of 0 is an unpriveleged user, a manager level of 1 is a user who manages one or more resources, and a manager level of 2 is a user who is a system administrator for the CardControl system. Other values are invalid.
+
+|  Field          | Value Type      | Description                                                      | Example                 |
+|-----------------|-----------------|------------------------------------------------------------------|-------------------------|
+| utln            | STRING          | The unqiue UTLN username associated with the user.               | jsmith01                |
+| first_name      | STRING          | The first name of the user.                                      | John                    |
+| last_name       | STRING          | The last name of the user.                                       | Smith                   |
+| manager_level   | INT             | 0 == unpriveleged, 1 == resource manager, 2 == system manager    | 2                       |
+| card            | STRING          | A reference to the active card of the user.                      | /api/v1/card/1          |
+| access_points   | STRING[]        | An array of references to the access points this user can enter. | [/api/v1/access_point/1]|
+| resources_managed | STRING[]      | An array of resources which this user manages.                   | [/api/v1/resource/1]    |
+| id              | INT             | Has value $id.                                                   | 1                       |
+| resource_uri    | STRING          | Has value '/api/v1/user_account/$id'.                            | /api/v1/user_account/1  |
+
+An example JSON object is as follows:
+
+```
+{
+  "access_points": [
+    "/api/v1/access_point/1/",
+    "/api/v1/access_point/2/",
+    "/api/v1/access_point/3/",
+    "/api/v1/access_point/5/"
+  ],
+  "card": "/api/v1/card/2/",
+  "first_name": "Matthew",
+  "id": 1,
+  "last_name": "Asnes",
+  "manager_level": 2,
+  "resource_uri": "/api/v1/user_account/1/",
+  "resources_managed": [
+    "/api/v1/resource/1/",
+    "/api/v1/resource/2/"
+  ],
+  "utln": "masnes01"
+}
+```
+
+### GET /api/v1/user_account?utln=`$utln`
+
+Returns an array guaranteed to contain one object, which is the unique user whose UTLN is the string specified. 
+
+An example JSON object is as follows:
+
+```
+{
+  "meta": {
+    "limit": 20,
+    "next": null,
+    "offset": 0,
+    "previous": null,
+    "total_count": 1
+  },
+  "objects": [
+    {
+      "access_points": [
+        "/api/v1/access_point/1/",
+        "/api/v1/access_point/2/",
+        "/api/v1/access_point/3/",
+        "/api/v1/access_point/5/"
+      ],
+      "card": "/api/v1/card/2/",
+      "first_name": "Matthew",
+      "id": 1,
+      "last_name": "Asnes",
+      "manager_level": 2,
+      "resource_uri": "/api/v1/user_account/1/",
+      "resources_managed": [
+        "/api/v1/resource/1/",
+        "/api/v1/resource/2/"
+      ],
+      "utln": "masnes01"
+    }
+  ]
+}
+```
+
+## Access Point
+
+An access point is any single location to which access can be granted or revoked, e.g. a door on campus, or a web application.
+
+### GET /api/v1/access_point/`$id`
+
+Returns the access point with the given ID. 
+
+|  Field          | Value Type      | Description                                                      | Example                 |
+|-----------------|-----------------|------------------------------------------------------------------|-------------------------|
+| access_point_name | STRING        | The name of this access point.                                   | Halligan Main Entrance  |
+| resource        | STRING          | The resource to which this access point belongs.                 | /api/v1/resource/1      |
+| created_by      | STRING          | The user who created this access point.                          | /api/v1/user_account/1  |
+| modified_by     | STRING          | The user who last modified this access point.                    | /api/v1/user_account/1  |
+| id              | INT             | Has value $id.                                                   | 1                       |
+| resource_uri    | STRING          | Has value '/api/v1/access_point/$id'.                            | /api/v1/access_point/1  |
+
+An example JSON object is as follows:
+
+```
+{
+  "access_point_name": "Metcalf East",
+  "resource": "/api/v1/resource/1/",
+  "modified_by": "/api/v1/user_account/1/",
+  "created_by": "/api/v1/user_account/1/",
+  "resource_uri": "/api/v1/access_point/1/"
+  "id": 1,
+}
+```
+
+### GET /api/v1/access_point?access_point_name=`$access_point_name`
+
+Returns an array of access points with the given access point name. Multiple access points many have the same name. If the access point name contains spaces, those spaces should be present, and the name should not be placed in quotes of any kind.
+
+An example JSON object is as follows:
+
+```
+{
+  "meta": {
+    "limit": 20,
+    "next": null,
+    "offset": 0,
+    "previous": null,
+    "total_count": 1
+  },
+  "objects": [
+    {
+      "access_point_name": "Metcalf East",
+      "created_by": "/api/v1/user_account/1/",
+      "id": 1,
+      "modified_by": "/api/v1/user_account/1/",
+      "resource": "/api/v1/resource/1/",
+      "resource_uri": "/api/v1/access_point/1/"
+    }
+  ]
+}
+```
+
+### GET /api/v1/access_point?resource=`$resource`
+
+Returns an array of access points belonging to the given resource. The variable $resource should contain the ID of the resource in question.
+
+An example JSON object is as follows:
+
+```
+{
+  "meta": {
+    "limit": 20,
+    "next": null,
+    "offset": 0,
+    "previous": null,
+    "total_count": 2
+  },
+  "objects": [
+    {
+      "access_point_name": "Metcalf West",
+      "created_by": "/api/v1/user_account/1/",
+      "id": 2,
+      "modified_by": "/api/v1/user_account/1/",
+      "resource": "/api/v1/resource/1/",
+      "resource_uri": "/api/v1/access_point/2/"
+    },
+    {
+      "access_point_name": "Metcalf East",
+      "created_by": "/api/v1/user_account/1/",
+      "id": 1,
+      "modified_by": "/api/v1/user_account/1/",
+      "resource": "/api/v1/resource/1/",
+      "resource_uri": "/api/v1/access_point/1/"
+    }
+  ]
+}
+```
+
+
+### POST/PUT /api/v1/access_point
+
+Sends a new access point object to the database.
+
+The object to be send should have the following fields. Any additional fields will be ignored.
+
+|  Field          | Value Type      | Description                                                      | Example                 |
+|-----------------|-----------------|------------------------------------------------------------------|-------------------------|
+| access_point_name | STRING        | The name of this access point.                                   | Halligan Main Entrance  |
+| resource        | STRING          | The resource to which this access point belongs.                 | /api/v1/resource/1      |
+| created_by      | STRING          | The user who created this access point.                          | /api/v1/user_account/1  |
+| modified_by     | STRING          | The user who last modified this access point.                    | /api/v1/user_account/1  |
+
+The header of the HTTP request must match the format of the data being sent, and that format must be either JSON or XML. 
+
+
+
+## Resource
+
+A resource is a collection of access points, e.g. a building; a resource is something with a distinct address.
+
+### GET /api/v1/resource/`$id`
+
+Returns the access point with the given ID. 
+
+|  Field          | Value Type      | Description                                                      | Example                 |
+|-----------------|-----------------|------------------------------------------------------------------|-------------------------|
+| resource_name   | STRING          | The name of the access point.                                    | Halligan Hall           |
+| city            | STRING          | The city in which the access point resides. Can be null.         | Medford                 |
+| country         | STRING          | The country in which the access point resides.                   | /api/v1/user_account/1  |
+| state           | STRING          | state in which the access point resides. Can be null.            | /api/v1/user_account/1  |
+| address         | STRING          | The address at which the access point resides.                   | 161 College Ave         |
+| zipcode         | STRING          | The area code in which the access point resides.                 | 02155                   |
+| created_by      | STRING          | The user who created this access point.                          | /api/v1/user_account/1  |
+| modified_by     | STRING          | The user who last modified this access point.                    | /api/v1/user_account/1  |
+| id              | INT             | Has value `$id`.                                                 | 1                       |
+| resource_uri    | STRING          | Has value '/api/v1/resource/`$id`'.                              | /api/v1/resource/1      |
+
+An example JSON object is as follows:
+
+```
+{
+  "city": "Medford",
+  "country": "United States",
+  "created_by": "/api/v1/user_account/1/",
+  "id": 1,
+  "modified_by": "/api/v1/user_account/1/",
+  "resource_name": "Metcalf Hall",
+  "resource_uri": "/api/v1/resource/1/",
+  "state": "MA",
+  "street": "56 Professors Row",
+  "zipcode": "02155"
+}
+```
+
+### GET /api/v1/resource?resource_name=`$resource_name`
+Returns an array of access points with the resource name set to `$resource_name`.
+Note that requests with the `?` query operator can be chained, e.g. `/api/v1/resource/?city=$city&zipcode=$zipcode`.
+
+### GET /api/v1/resource?city=`$city`
+Returns an array of access points with the city set to `$city`.
+Note that requests with the `?` query operator can be chained, e.g. `/api/v1/resource/?city=$city&zipcode=$zipcode`.
+
+### GET /api/v1/resource?state=`$state`
+Returns an array of access points with the state set to `$state`.
+Note that requests with the `?` query operator can be chained, e.g. `/api/v1/resource/?city=$city&zipcode=$zipcode`.
+
+### GET /api/v1/resource?country=`$country`
+Returns an array of access points with the country set to `$country`.
+Note that requests with the `?` query operator can be chained, e.g. `/api/v1/resource/?city=$city&zipcode=$zipcode`.
+
+### GET /api/v1/resource?address=`$address`
+Returns an array of access points with the address set to `$address`.
+Note that requests with the `?` query operator can be chained, e.g. `/api/v1/resource/?city=$city&zipcode=$zipcode`.
+
+### GET /api/v1/resource?zipcode=`$zipcode`
+Returns an array of access points with the zipcode set to `$zipcode`.
+Note that requests with the `?` query operator can be chained, e.g. `/api/v1/resource/?city=$city&zipcode=$zipcode`.
+
+### POST/PUT /api/v1/resource
+
+Sends a new access point object to the database.
+
+The object to be send should have the following fields. Any additional fields will be ignored.
+
+|  Field          | Value Type      | Description                                                      | Example                 |
+|-----------------|-----------------|------------------------------------------------------------------|-------------------------|
+| resource_name   | STRING          | The name of the access point.                                    | Halligan Hall           |
+| city            | STRING          | The city in which the access point resides. Can be null.         | Medford                 |
+| country         | STRING          | The country in which the access point resides.                   | /api/v1/user_account/1  |
+| state           | STRING          | state in which the access point resides. Can be null.            | /api/v1/user_account/1  |
+| address         | STRING          | The address at which the access point resides.                   | 161 College Ave         |
+| zipcode         | INT             | The area code in which the access point resides.                 | 02155                   |
+| created_by      | STRING          | The user who created this access point.                          | /api/v1/user_account/1  |
+| modified_by     | STRING          | The user who last modified this access point.                    | /api/v1/user_account/1  |
+
+The header of the HTTP request must match the format of the data being sent, and that format must be either JSON or XML. 
+
+Fields will be checked for validity (e.g. zipcode) before being added to the database.
+
+## Request
+
+A request is an item connecting a user account to a new group of resources or a new card; this is the primary mode by which modification are made to cards. When a request is made, managers with appropriate clearance will be able to see and interact with the request and thereby accept or reject it from inside the CardControl system.
+
+### GET /api/v1/request/`$id`
+
+Returns the request with the given ID. 
+
+|  Field          | Value Type      | Description                                                      | Example                 |
+|-----------------|-----------------|------------------------------------------------------------------|-------------------------|
+| user            | STRING          | The user account on whose behalf this request is being made.     | /api/v1/user_account/1  |
+| new_access_points| STRING[]       | A list of access points to which the user requests access, in addition to current ones. | [/api/v1/access_point/1]|
+| new_card        | STRING          | A reference to the card which the user wishes to make their active card | /api/v1/card/1 |
+| feedback        | STRING          | The manager feedback on this request.                            | "Accepted."  |
+| reason          | STRING          | The justification as to why this request should be accepted.     | "Have class there." |
+| request_level   | INT             | The manager level needed to clear this request.                  | 2                   |
+| status          | INT             | 0 == open, 1 == accepted, 2 == rejected                          | 0                   |
+| created_at      | DATETIME        | The time at which the request was submitted                      | 2017-04-06T18:44:27.931607 |
+| modified_at     | DATETIME        | The time at which the request was last modified                  | 2017-04-06T18:44:27.931607 |
+| created_by      | STRING          | The user who created this access point.                          | /api/v1/user_account/1  |
+| modified_by     | STRING          | The user who last modified this access point.                    | /api/v1/user_account/1  |
+| id              | INT             | Has value `$id`.                                                 | 1                       |
+| resource_uri    | STRING          | Has value '/api/v1/resource/`$id`'.                              | /api/v1/resource/1      |
+
+An example JSON object is as follows:
+
+```
+{
+  "user": "/api/v1/user_account/1/"
+  "new_access_points": [],
+  "new_card": "/api/v1/card/5/",
+  "feedback": null,
+  "reason": null,
+  "request_level": 1,
+  "status": 0,
+  "created_at": "2017-04-06T18:44:27.931607",
+  "modified_at": "2017-04-06T18:44:27.931607",
+  "created_by": "/api/v1/user_account/1/",
+  "modified_by": "/api/v1/user_account/1/",
+  "id": 1,
+  "resource_uri": "/api/v1/request/1/",
+}
+```
+
+### GET /api/v1/request/?user=`$user`
+Returns an array of access points with the resource name set to `$user`.
+Note that requests with the `?` query operator can be chained, e.g. `/api/v1/request/?status=$status&created_at=$created_at`.
+
+### GET /api/v1/request/?request_level=`$request_level`
+Returns an array of access points with the request_level set to `$request_level`.
+Note that requests with the `?` query operator can be chained, e.g. `/api/v1/request/?status=$status&created_at=$created_at`.
+
+### GET /api/v1/request/?status=`$status`
+Returns an array of access points with the status set to `$status`.
+Note that requests with the `?` query operator can be chained, e.g. `/api/v1/request/?status=$status&created_at=$created_at`.
+
+### GET /api/v1/request/?modified_at=`$modified_at`
+Returns an array of access points with the modified_at set to `$modified_at`.
+Note that requests with the `?` query operator can be chained, e.g. `/api/v1/request/?status=$status&created_at=$created_at`.
+
+### GET /api/v1/request/?created_at=`$created_at`
+Returns an array of access points with the created_at set to `$created_at`.
+Note that requests with the `?` query operator can be chained, e.g. `/api/v1/request/?status=$status&created_at=$created_at`.
+
+### PUT/POST /api/v1/request` 
+
+
+Sends a new access point object to the database.
+
+The object to be send should have the following fields. Any additional fields will be ignored.
+
+|  Field          | Value Type      | Description                                                      | Example                 |
+|-----------------|-----------------|------------------------------------------------------------------|-------------------------|
+| user            | STRING          | The user account on whose behalf this request is being made.     | /api/v1/user_account/1  |
+| new_access_points| STRING[]       | A list of access points to which the user requests access, in addition to current ones. | [/api/v1/access_point/1]|
+| new_card        | STRING          | A reference to the card which the user wishes to make their active card | /api/v1/card/1 |
+| feedback        | STRING          | The manager feedback on this request.                            | "Accepted."  |
+| reason          | STRING          | The justification as to why this request should be accepted.     | "Have class there." |
+| request_level   | INT             | The manager level needed to clear this request.                  | 2                   |
+| status          | INT             | 0 == open, 1 == accepted, 2 == rejected                          | 0                   |
+| created_at      | DATETIME        | The time at which the request was submitted                      | 2017-04-06T18:44:27.931607 |
+| modified_at     | DATETIME        | The time at which the request was last modified                  | 2017-04-06T18:44:27.931607 |
+| created_by      | STRING          | The user who created this access point.                          | /api/v1/user_account/1  |
+| modified_by     | STRING          | The user who last modified this access point.                    | /api/v1/user_account/1  |
+
+The header of the HTTP request must match the format of the data being sent, and that format must be either JSON or XML. 
+
+Fields will be checked for validity; for example, changing the status is not allowed if the user in question is not a manager.
+
+# Implementation
+
+Our API is implemented in our Django backend through use of the Tastypie module.
diff --git a/install.sh b/install.sh
index 46789fe..fb85622 100755
--- a/install.sh
+++ b/install.sh
@@ -26,10 +26,6 @@ fi;
 
 echo -e "${goodc}Fetching username.${noc}"
 user=$(id | sed 's/[^(]*(//' | sed 's/).*//')
-if [[ "$user" == "root" ]]; then
-	echo -e "${badc}Please do not run this script as root.${noc}"
-	exit 1
-fi;
 
 echo -e "${goodc}Checking expected library directory.${noc}"
 libdir=${1:-"/home/${user}/comp120-libraries"}
@@ -73,6 +69,16 @@ if [[ $es -eq 1 ]]; then
 	sudo ${pmg} install openssl 1>/dev/null
 	sudo ${pmg} install libssl-dev 2>/dev/null
 	sudo ${pmg} install libssl-devel 2>/dev/null
+
+	echo -e "${goodc}Attempting to install NGINX${noc}"
+	sudo ${pmg} install nginx
+
+	echo -e "${goodc}Attempting to install uWSGI${noc}"
+	sudo ${pmg} install python
+	sudo ${pmg} install python-devel 2>/dev/null
+	sudo ${pmg} install python-dev 2>/dev/null
+	pip install uwsgi
+
 fi;
 
 echo -e "${goodc}Checking that /usr/local/bin is in the front of PATH.${noc}"
diff --git a/ng-build.sh b/ng-build.sh
new file mode 100755
index 0000000..cb7921c
--- /dev/null
+++ b/ng-build.sh
@@ -0,0 +1,2 @@
+#!/bin/bash
+node --max_old_space_size=2000 ./node_modules/.bin/ng build -prod --verbose --output-path /home/ec2-user/cardcontrol/dist/
diff --git a/package.json b/package.json
index 7506f2d..e5251ca 100644
--- a/package.json
+++ b/package.json
@@ -12,25 +12,28 @@
   },
   "private": true,
   "dependencies": {
-    "@angular/common": "^2.4.0",
-    "@angular/compiler": "^2.4.0",
-    "@angular/core": "^2.4.0",
-    "@angular/flex-layout": "^2.0.0-rc.1",
-    "@angular/forms": "^2.4.0",
-    "@angular/http": "^2.4.0",
+    "@angular/animations": "^4.0.1",
+    "@angular/common": "^4.0.1",
+    "@angular/compiler": "^4.0.1",
+    "@angular/compiler-cli": "^4.0.1",
+    "@angular/core": "^4.0.1",
+    "@angular/flex-layout": "^2.0.0-beta.7",
+    "@angular/forms": "^4.0.1",
+    "@angular/http": "^4.0.1",
     "@angular/material": "^2.0.0-beta.2",
-    "@angular/platform-browser": "^2.4.0",
-    "@angular/platform-browser-dynamic": "^2.4.0",
-    "@angular/router": "^3.4.0",
-    "angular2-google-maps": "^0.17.0",
+    "@angular/platform-browser": "^4.0.1",
+    "@angular/platform-browser-dynamic": "^4.0.1",
+    "@angular/platform-server": "^4.0.1",
+    "@angular/router": "^4.0.1",
     "core-js": "^2.4.1",
     "hammerjs": "^2.0.8",
     "rxjs": "^5.1.0",
-    "zone.js": "^0.7.6"
+    "typescript": "^2.2.2",
+    "zone.js": "^0.8.5"
   },
   "devDependencies": {
-    "@angular/cli": "^1.0.0-rc.2",
-    "@angular/compiler-cli": "^2.4.0",
+    "@angular/cli": "^1.0.0",
+    "@angular/compiler-cli": "^4.0.1",
     "@types/jasmine": "2.5.38",
     "@types/node": "~6.0.60",
     "codelyzer": "~2.0.0-beta.4",
diff --git a/running.sh b/running.sh
new file mode 100755
index 0000000..9b08ece
--- /dev/null
+++ b/running.sh
@@ -0,0 +1,2 @@
+#!/bin/bash
+ps ax | grep -E "angular|runserve|nginx|uwsgi|postgres|psql|pgsql" | grep -v grep
diff --git a/schema.json b/schema.json
new file mode 100644
index 0000000..1f9aed1
--- /dev/null
+++ b/schema.json
@@ -0,0 +1,160 @@
+// Note: As this is JSON, the order of fields doesn't matter in requests; 
+//chere they're listed in the order they appear when a GET request is made 
+// from the server. 
+
+// Note: Every object has an 'id' and 'resource_uri' field which can be included
+// or not as needed; they default to null if not used
+
+// CARD SCHEMA
+// A card is the basic unit of the id card system. There can be multiple 
+// cards under one UTLN. The 'active' ID card is determined by the single card
+// that is linked to the user account of the UTLN.
+{
+  "barcode": 0,
+  "birth_date": "1996-10-02",
+  "class_year": 2019,
+  "first_name": "Harrison",
+  "jumbocash_id": 111222333,
+  "last_name": "Kaiser",
+  "middle_initial": "M",
+  "school": "Liberal Arts",
+  "student_type": "Undergraduate",
+  "utln": "hkaise01"
+}
+
+// curl --dump-header - -H "Content-Type: application/json" -X POST --data '{"barcode": 0, "birth_date": "1996-04-01", "class_year": 2018, "first_name": "Marina", "jumbocash_id": 111222333, "last_name": "Rakhilin", "middle_initial": "S", "school": "Liberal Arts", "student_type": "Undergraduate", "utln": "mrakhi01"}' http://localhost:8000/api/v1/card/
+
+
+// USER_ACCOUNT SCHEMA
+// A user account is the thing with which we will hopefully authenticate, 
+// and which determines what the user sees. This should be the first request
+// made when displaying information on the main page. It links to the card
+// which the user has. If the user is a manager, they will have a nonzero
+// manager_level, and will have access to the manager page.
+{
+  "card": "/api/v1/card/2/", // Reference to the active card of the user
+  "first_name": "Matthew",
+  "last_name": "Asnes",
+  "access_points": [
+    "/api/v1/access_point/1/",
+    "/api/v1/access_point/2/",
+    "/api/v1/access_point/3/",
+    "/api/v1/access_point/5/"
+  ],
+  "manager_level": 2, // 0 for unprivileged users, 1 for a Resource Manager, 2 for a System Manager.
+  "utln": "masnes01" // Unique field â€” only one user account can have a given UTLN.
+}
+// Only the GET method is allowed for user accounts, so for now only the
+// pre-made test user accounts are in the database and `curl` will not be
+// useful for adding new ones.
+
+
+// RESOURCE SCHEMA
+// An access point simply includes some location information for a given access_point on
+// campus, web application, etc., and some audit metadata.
+{
+  "resource_name": "Metcalf Hall",
+  "zipcode": "02155",
+  "country":"United States",
+  "state":"MA",
+  "city":"Medford",
+  "street":"56 Professors Row",
+  "created_by": "/api/v1/user_account/1/",
+  "modified_by": "/api/v1/user_account/1/",
+}
+
+// ACCESS POINT SCHEMA
+// An access point simply includes some location information for a given access_point on
+// campus, web application, etc., and some audit metadata.
+{
+  "access_point_name": "Metcalf East",
+  "resource": "/api/v1/resource/1/",
+  "created_by": "/api/v1/user_account/1/",
+  "modified_by": "/api/v1/user_account/1/",
+}
+// curl --dump-header - -H "Content-Type: application/json" -X POST --data '{"address": "25 Latin Way, Medford, MA 02155", "resource_name": "Dewick MacPhie Dining Center", "access_point_name": "Main Entrance", "created_by": "/api/v1/user_account/1/", "modified_by":"/api/v1/user_account/1/"}' http://localhost:8000/api/v1/access_point/
+
+
+// REQUEST SCHEMA
+// A request links a user account and a new card. When a request is made,
+// some card in the system is linked to a user account. A given user account
+// can have multiple requests filed, which should be handled in order of their
+// modified_at date. Note that the created_at and modified_at fields will be
+// created automatically on a POST or PUT request and should not be included.
+{
+  "created_at": "2017-04-04T00:30:15.351110", // Created automatically, do not fill out
+  "created_by": "/api/v1/user_account/1/",
+  "message": null, // Either a string, or null
+  "modified_at": "2017-04-04T00:30:15.351110",
+  "modified_by": "/api/v1/user_account/1/",
+  "new_card": "/api/v1/card/5/",
+  "new_access_points": [], // New access_points to be added to the user account.
+  "request_level": 1, // 0 for a request which only asks for new access_points, 1 for a request which modifies other values in the card. 
+  "status": 0, // 0 for OPEN, 1 for ACCEPTED, 2 for REJECTED
+  "user": "/api/v1/user_account/1/"
+}
+// curl --dump-header - -H "Content-Type: application/json" -X POST --data '{"created_at": "2017-04-04T00:58:37.569720", "created_by": "/api/v1/user_account/1/", "id": 1, "message": null, "modified_at": "2017-04-04T00:58:37.569720", "modified_by": "/api/v1/user_account/1/", "new_access_points": [], "new_card": "/api/v1/card/5/", "request_level": 1, "resource_uri": "/api/v1/request/1/", "status": 0, "user": "/api/v1/user_account/1/"}' http://localhost:8000/api/v1/request/
+
+
+
+// ACTIONS WHICH CAN BE MADE:
+
+// User views their ID card:
+// GET request for user_account with utln equal to the user's UTLN
+// extract active ID card URI (e.g. /api/v1/card/4) from user_account data
+// GET request for active ID card
+// display card information
+
+// User creates a new card request:
+// POST request to create new card given information user enters
+// POST request to create new request linking new card to user account (access_points field in request should be blank)
+
+// User views access points:
+// GET request for user_account with utln equal to the user's UTLN
+// extract array of access points from user_account data
+// for each access point URI in the array:
+//     GET request for the access point
+//     display the access point information
+
+// User creates a new request for access to an access point:
+// POST request to create a new request linking new access point(s) to user account
+
+// User views their requests:
+// GET request for requests with UTLN equal to user's UTLN
+// for each request URI in resulting array:
+//     GET request for request object
+//     Display the request
+
+// User/Manager updates a request:
+// GET request for request object
+// read fields, display for user, make new request object when they submit
+// PUT request to request object
+
+// User attempts to view manager page:
+// GET request for user_account with utln equal to the user's UTLN
+// If manager_level field is greater than 1, allow access, otherwise error
+
+// Manager views request queue:
+// GET requests with request_level less than / equal to the manager level of the user
+// For each request:
+//     Display request data
+
+// Manager accepts request:
+// GET request for the request
+// GET request for associated user account
+// If request_level == 1:
+//      GET request for associated new_access_points
+//      make new user object with access_points = new_access_points
+//      PUT request to user account, sending new object over
+// If request_level == 2:
+//     GET request for associated new_card
+//     make new user object with card = new_card
+//     PUT request to user account, sending new object over
+// make new request object, with status = 1, message = "Accepted" (or a real message?)
+// PUT request to request object, sending new object over
+
+// Manager rejects request:
+// GET request for the request
+// make new request object, with status = 2 or 3, message = "Rejected" or a real message
+// PUT request to request object, sending new object over
+
diff --git a/src/app/app.module.ts b/src/app/app.module.ts
index 1f14911..cfa6977 100644
--- a/src/app/app.module.ts
+++ b/src/app/app.module.ts
@@ -11,7 +11,8 @@ import 'hammerjs';
 
 import { AppComponent } from './app.component';
 import { PageNotFoundComponent } from './page-not-found/page-not-found.component';
-import {AgmCoreModule} from "angular2-google-maps/core";
+import {RequestService} from "./request/request.service";
+import {UserService} from "./user/shared/user.service";
 
 @NgModule({
   declarations: [
@@ -26,12 +27,9 @@ import {AgmCoreModule} from "angular2-google-maps/core";
     MaterialModule,
     UserModule,
     ManagerModule,
-    AppRoutingModule,
-    AgmCoreModule.forRoot({
-      apiKey: 'AIzaSyDc8MZkYtflM5jVFga5x4gzH55x2c5kx9M'
-    })
+    AppRoutingModule
   ],
-  providers: [],
+  providers: [RequestService, UserService],
   bootstrap: [AppComponent]
 })
 export class AppModule { }
diff --git a/src/app/building.ts b/src/app/building.ts
deleted file mode 100644
index ad1b528..0000000
--- a/src/app/building.ts
+++ /dev/null
@@ -1,7 +0,0 @@
-import {Door} from './door';
-
-export class Building {
-  name: string;
-  address: string;
-  doors: Door[];
-}
diff --git a/src/app/door.ts b/src/app/door.ts
deleted file mode 100644
index c710963..0000000
--- a/src/app/door.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-export class Door {
-  name: string;
-}
diff --git a/src/app/manager/manager-buildings/manager-buildings.component.html b/src/app/manager/manager-buildings/manager-buildings.component.html
index b0d5660..cbedd55 100644
--- a/src/app/manager/manager-buildings/manager-buildings.component.html
+++ b/src/app/manager/manager-buildings/manager-buildings.component.html
@@ -1,3 +1,27 @@
-<p>
-  manager-buildings works!
-</p>
+<md-grid-list cols="5" rowHeight='4:3'>
+  
+  <md-grid-tile>
+  	<md-grid-tile-footer>Building 1</md-grid-tile-footer>
+  </md-grid-tile>
+  
+  <md-grid-tile>
+  	<md-grid-tile-footer>Building 2</md-grid-tile-footer>
+  </md-grid-tile>
+
+  <md-grid-tile>
+  	<md-grid-tile-footer>Building 3</md-grid-tile-footer>
+  </md-grid-tile>
+
+  <md-grid-tile>
+  	<md-grid-tile-footer>Building 4</md-grid-tile-footer>
+  </md-grid-tile>
+
+  <md-grid-tile>
+  	<md-grid-tile-footer>Building 5</md-grid-tile-footer>
+  </md-grid-tile>
+
+  <md-grid-tile>
+  	<md-grid-tile-footer>Building 6</md-grid-tile-footer>
+  </md-grid-tile>
+
+</md-grid-list>
diff --git a/src/app/manager/manager-create-building/manager-create-building.component.html b/src/app/manager/manager-create-building/manager-create-building.component.html
index 664d51a..f06d780 100644
--- a/src/app/manager/manager-create-building/manager-create-building.component.html
+++ b/src/app/manager/manager-create-building/manager-create-building.component.html
@@ -1,7 +1,7 @@
-<div class="card-wrapper">
-  <md-card>
+<div class="manager-create-building-wrapper" fxLayout="column" fxLayoutAlign="space-around stretch">
+  <md-card fxLayout="column" fxLayoutAlign="space-around center">
     <form class="create-building-form">
-      <h2>Create New Building</h2>
+      <h1>Create New Building</h1>
 
       <md-select placeholder="Campus">
       </md-select>
@@ -16,10 +16,14 @@
       <md-input-container>
         <input type="text" mdInput placeholder="Add Rooms">
       </md-input-container>
+      <div>
+        <label>Photo: </label><input type="file">
+      </div>
      
       <div class="submit-button">
         <button type='submit' md-button>Submit</button>
       </div>
+      
 
     </form>
   </md-card>
diff --git a/src/app/manager/manager-create-building/manager-create-building.component.scss b/src/app/manager/manager-create-building/manager-create-building.component.scss
index b7fe6b3..356e108 100644
--- a/src/app/manager/manager-create-building/manager-create-building.component.scss
+++ b/src/app/manager/manager-create-building/manager-create-building.component.scss
@@ -1,18 +1,17 @@
-.card-wrapper {
-  	padding: 20px;
-	max-width: 500px;
+.manager-create-building-wrapper {
+	padding: 50px;
+	max-width: 600px !important;
 	margin: 0 auto;
 }
+h1 {
+	text-align: center;
+	margin-bottom: 40px;
+}
 .section {
 	margin-bottom: 10px;
 }
 .create-building-form {
-	padding: 20px 40px;
-
-	h2{
-		margin-bottom: 30px;
-		text-align: center;
-	}
+	padding: 0 40px;
 }
 md-select {
 	position: relative;
@@ -28,4 +27,5 @@ md-select {
 
 .submit-button {
 	margin-top: 30px;
+	text-align: center;
 }
\ No newline at end of file
diff --git a/src/app/manager/manager-create-id/manager-create-id.component.html b/src/app/manager/manager-create-id/manager-create-id.component.html
index f758b4e..b17af02 100644
--- a/src/app/manager/manager-create-id/manager-create-id.component.html
+++ b/src/app/manager/manager-create-id/manager-create-id.component.html
@@ -1,7 +1,7 @@
-<div class="card-wrapper">
-  <md-card>
+<div class="manager-create-id-wrapper" fxLayout="column" fxLayoutAlign="space-around stretch">
+  <md-card fxLayout="column" fxLayoutAlign="space-around center">
     <form class="create-id-form">
-      <h2>Create New ID</h2>
+      <h1>Create New ID</h1>
       <div class="section">
       	<label>Photo: </label><input type="file">
       </div>
diff --git a/src/app/manager/manager-create-id/manager-create-id.component.scss b/src/app/manager/manager-create-id/manager-create-id.component.scss
index b349d75..0c941a2 100644
--- a/src/app/manager/manager-create-id/manager-create-id.component.scss
+++ b/src/app/manager/manager-create-id/manager-create-id.component.scss
@@ -1,18 +1,17 @@
-.card-wrapper {
-  	padding: 20px;
-	max-width: 500px;
+.manager-create-id-wrapper {
+	padding: 50px;
+	max-width: 600px !important;
 	margin: 0 auto;
 }
+h1 {
+	text-align: center;
+	margin-bottom: 40px;
+}
 .section {
 	margin-bottom: 10px;
 }
 .create-id-form {
-	padding: 20px 40px;
-
-	h2{
-		margin-bottom: 30px;
-		text-align: center;
-	}
+	padding: 0px 40px;
 }
 
 .full-width{
@@ -25,4 +24,5 @@
 
 .submit-button {
 	margin-top: 30px;
+	text-align: center;
 }
\ No newline at end of file
diff --git a/src/app/manager/manager-main/manager-main.component.html b/src/app/manager/manager-main/manager-main.component.html
index 241f702..3c1d7a2 100644
--- a/src/app/manager/manager-main/manager-main.component.html
+++ b/src/app/manager/manager-main/manager-main.component.html
@@ -1,4 +1,4 @@
-<md-sidenav-container class="demo-root" fullscreen>
+<md-sidenav-container fullscreen>
   <md-sidenav #start mode="side" opened="true">
     <md-nav-list>
       <ng-container *ngFor="let navItem of navItems">
diff --git a/src/app/manager/manager-main/manager-main.component.ts b/src/app/manager/manager-main/manager-main.component.ts
index 2be546d..397c1a1 100644
--- a/src/app/manager/manager-main/manager-main.component.ts
+++ b/src/app/manager/manager-main/manager-main.component.ts
@@ -10,7 +10,7 @@ export class ManagerMainComponent implements OnInit {
   navItems = [
     {route: ".", name: "Home", admin: false},
     {route: "buildings", name: "My Buildings", admin: false},
-    {route: "requests", name: "Pending Requests", admin: false},
+    {route: "requests", name: "Requests", admin: false},
     {route: "createID", name: "Create ID", admin: true},
     {route: "createBuilding", name: "Create Building", admin: true},
     {route: "search", name: "Search", admin: false},
diff --git a/src/app/manager/manager-requests/manager-requests.component.html b/src/app/manager/manager-requests/manager-requests.component.html
index 6f640d8..1e1777a 100644
--- a/src/app/manager/manager-requests/manager-requests.component.html
+++ b/src/app/manager/manager-requests/manager-requests.component.html
@@ -1,32 +1,39 @@
+<md-tab-group>
+  <md-tab label="Pending Requests">
+    <div class="manager-requests-wrapper" fxLayout="column" fxLayoutAlign="space-around stretch">
+      <md-card fxLayout="column" fxLayoutAlign="space-around center">
+        <div>
+          <div>
+            <h2>New Request from: Matt Asnes</h2>
+          </div>
+        </div>
+      </md-card>
+      <md-card fxLayout="column" fxLayoutAlign="space-around center">
+        <div>
+          <div>
+            <h2>New Request from: Matt Asnes 2</h2>
+          </div>
+        </div>
+      </md-card>
+      <md-card fxLayout="column" fxLayoutAlign="space-around center">
+        <div>
+          <div>
+            <h2>New Request from: Adam Plumer</h2>
+          </div>
+        </div>
+      </md-card>
+      <md-card fxLayout="column" fxLayoutAlign="space-around center">
+        <div>
+          <div>
+            <h2>New Request from: Elias Jarzombek</h2>
+          </div>
+        </div>
+      </md-card>
 
-<div class="manager-requests-wrapper" fxLayout="column" fxLayoutAlign="space-around stretch">
-  <md-card fxLayout="column" fxLayoutAlign="space-around center">
-    <div>
-      <div>
-        <h2>New Request from: Matt Asnes</h2>
-      </div>
     </div>
-  </md-card>
-  <md-card fxLayout="column" fxLayoutAlign="space-around center">
-    <div>
-      <div>
-        <h2>New Request from: Matt Asnes 2</h2>
-      </div>
-    </div>
-  </md-card>
-  <md-card fxLayout="column" fxLayoutAlign="space-around center">
-    <div>
-      <div>
-        <h2>New Request from: Adam Plumer</h2>
-      </div>
-    </div>
-  </md-card>
-  <md-card fxLayout="column" fxLayoutAlign="space-around center">
-    <div>
-      <div>
-        <h2>New Request from: Elias Jarzombek</h2>
-      </div>
-    </div>
-  </md-card>
 
-</div>
+  </md-tab>
+  <md-tab label="Past Reqests">
+    <p>Past Requests...</p>
+  </md-tab>
+</md-tab-group>
diff --git a/src/app/manager/manager-routing.module.ts b/src/app/manager/manager-routing.module.ts
index a4cf1bc..cc0cc69 100644
--- a/src/app/manager/manager-routing.module.ts
+++ b/src/app/manager/manager-routing.module.ts
@@ -9,11 +9,13 @@ import {ManagerCreateIdComponent} from "./manager-create-id/manager-create-id.co
 import {ManagerCreateBuildingComponent} from "./manager-create-building/manager-create-building.component";
 import {ManagerAccountComponent} from "./manager-account/manager-account.component";
 import {ManagerRequestsComponent} from "./manager-requests/manager-requests.component";
+import {ManagerGuard} from "../shared/manager.guard";
 
 const managerRoutes: Routes = [
   {
     path: 'manage',
     component: ManagerMainComponent,
+    canActivate: [ManagerGuard],
     children: [
       {
         path: '',
@@ -53,6 +55,9 @@ const managerRoutes: Routes = [
   ],
   exports: [
     RouterModule
+  ],
+  providers: [
+    ManagerGuard
   ]
 })
 export class ManagerRoutingModule {}
diff --git a/src/app/manager/manager-search/manager-search.component.html b/src/app/manager/manager-search/manager-search.component.html
index d86d269..8a5dedd 100644
--- a/src/app/manager/manager-search/manager-search.component.html
+++ b/src/app/manager/manager-search/manager-search.component.html
@@ -1,3 +1,11 @@
-<p>
-  manager-search works!
-</p>
+
+<div class="manager-search-wrapper" fxLayout="column" fxLayoutAlign="space-around stretch">
+  <md-card fxLayout="column" fxLayoutAlign="space-around center">
+	  <h1>Search</h1>
+    <div>
+			<md-input-container>
+        <input type="search" class="search-field" mdInput placeholder="Search by ID, Name, Building, Campus">
+      </md-input-container>      
+    </div>
+  </md-card>
+</div>
\ No newline at end of file
diff --git a/src/app/manager/manager-search/manager-search.component.scss b/src/app/manager/manager-search/manager-search.component.scss
index e69de29..702a6c9 100644
--- a/src/app/manager/manager-search/manager-search.component.scss
+++ b/src/app/manager/manager-search/manager-search.component.scss
@@ -0,0 +1,6 @@
+.manager-search-wrapper {
+	padding: 50px;
+}
+.search-field {
+	width: 300px;
+}
\ No newline at end of file
diff --git a/src/app/request/request.service.spec.ts b/src/app/request/request.service.spec.ts
new file mode 100644
index 0000000..56498d4
--- /dev/null
+++ b/src/app/request/request.service.spec.ts
@@ -0,0 +1,15 @@
+import { TestBed, inject } from '@angular/core/testing';
+
+import { RequestService } from './request.service';
+
+describe('RequestService', () => {
+  beforeEach(() => {
+    TestBed.configureTestingModule({
+      providers: [RequestService]
+    });
+  });
+
+  it('should ...', inject([RequestService], (service: RequestService) => {
+    expect(service).toBeTruthy();
+  }));
+});
diff --git a/src/app/request/request.service.ts b/src/app/request/request.service.ts
new file mode 100644
index 0000000..b3f1ecf
--- /dev/null
+++ b/src/app/request/request.service.ts
@@ -0,0 +1,148 @@
+import { Injectable } from '@angular/core';
+import {Observable} from "rxjs";
+import {Http, RequestOptions, Response, Headers} from "@angular/http";
+import {Constants} from "../shared/constants";
+import {User} from "../shared/user";
+import {ChangeRequest} from "../shared/change-request";
+import {UserAccount} from "../shared/user_account";
+import {UserService} from "../user/shared/user.service";
+import {ManagedResource} from "../shared/managed-resource";
+import {AccessPoint} from "../shared/access-point";
+
+@Injectable()
+export class RequestService {
+
+  private apiUrl = Constants.API_ENDPOINT;
+
+  private userAccount : UserAccount;
+
+  constructor(
+    private http : Http,
+    private userService : UserService
+  ) {
+    this.userService.userAccount.subscribe(
+      data => {
+        console.log(data);
+        this.userAccount = data
+      }
+    )
+  }
+
+  public getRequests () : Observable<ChangeRequest[]> {
+    return this.http.get(Constants.API_PORT + '/api/v1/request?user=' + this.userAccount.id)
+      .map(this.extractData)
+      .catch(this.handleError);
+  }
+
+  public deleteRequest (request : ChangeRequest) {
+    this.http.delete(Constants.API_PORT + request.resource_uri).subscribe();
+  }
+
+  public closeReuqest (request : ChangeRequest) {
+    // change status to 2 and message to 'closed by user'
+    this.http.put(Constants.API_PORT + request.resource_uri, {}).subscribe();
+  }
+
+  public updateRequest (request : ChangeRequest) {
+    this.http.put(Constants.API_PORT + request.resource_uri, request).subscribe();
+  }
+
+  public getResources () : Observable<ManagedResource[]> {
+    return this.http.get(Constants.API_PORT + '/api/v1/resource')
+      .map(this.extractData)
+      .catch(this.handleError);
+  }
+
+  public getAccessPoints (resource : ManagedResource) : Observable<AccessPoint[]> {
+    return this.http.get(Constants.API_PORT + '/api/v1/access_point?resource=' + resource.id)
+      .map(this.extractData)
+      .catch(this.handleError);
+  }
+
+  public makeAccessRequest (accessPoints : AccessPoint[], reasonWhy : string) {
+
+    let headers = new Headers({ 'Content-Type': 'application/json' });
+    let options = new RequestOptions({ headers: headers });
+
+    let resourceUris : string[] = [];
+
+    for (let accessPoint of accessPoints) {
+      resourceUris.push(accessPoint.resource_uri);
+    }
+
+    let newReq : ChangeRequest = {
+      new_access_points: resourceUris,
+      resource_uri: null,
+      id: null,
+      request_level: 0,
+      status: 0,
+      new_card: null,
+      user: this.userAccount.resource_uri,
+      reason : reasonWhy,
+      feedback : null,
+      created_by: this.userAccount.resource_uri,
+      modified_by: this.userAccount.resource_uri
+    };
+
+    this.http.post(Constants.API_PORT + '/api/v1/request/', newReq, options)
+      .map(this.extractData)
+      .catch(this.handleError)
+      .subscribe();
+  }
+
+  public makeUpdateCard (newCard : User) {
+    let headers = new Headers({ 'Content-Type': 'application/json' });
+    let options = new RequestOptions({ headers: headers });
+
+    this.makeNewCard(newCard).subscribe(
+      data => {
+        let newReq : ChangeRequest = {
+          new_access_points: [],
+          request_level: 1,
+          status: 0,
+          id: null,
+          resource_uri: null,
+          new_card: data.resource_uri,
+          user: this.userAccount.resource_uri,
+          reason : null,
+          feedback : null,
+          created_by: this.userAccount.resource_uri,
+          modified_by: this.userAccount.resource_uri
+        };
+        this.http.post(Constants.API_PORT + '/api/v1/request/', newReq, options)
+          .map(this.extractData)
+          .catch(this.handleError)
+          .subscribe();
+      }
+    );
+  }
+
+  private makeNewCard(newCard : User) : Observable<User> {
+    let headers = new Headers({ 'Content-Type': 'application/json' });
+    let options = new RequestOptions({ headers: headers });
+
+    return this.http.post(Constants.API_PORT + '/api/v1/card/', newCard, options)
+      .map(this.extractData)
+      .catch(this.handleError);
+  }
+
+  private extractData(res: Response) {
+    let body = res.json();
+    return body.objects || body || { };
+  }
+
+  private handleError (error: Response | any) {
+    // TODO: Add remote logging
+    let errMsg: string;
+    if (error instanceof Response) {
+      const body = error.json() || '';
+      const err = body.error || JSON.stringify(body);
+      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;
+    } else {
+      errMsg = error.message ? error.message : error.toString();
+    }
+    console.error(errMsg);
+    return Observable.throw(errMsg);
+  }
+
+}
diff --git a/src/app/shared/access-point.ts b/src/app/shared/access-point.ts
new file mode 100644
index 0000000..781a05b
--- /dev/null
+++ b/src/app/shared/access-point.ts
@@ -0,0 +1,5 @@
+export class AccessPoint {
+  access_point_name : string;
+  resource_uri : string;
+  resource : string;
+}
diff --git a/src/app/shared/change-request.ts b/src/app/shared/change-request.ts
new file mode 100644
index 0000000..4ba12d2
--- /dev/null
+++ b/src/app/shared/change-request.ts
@@ -0,0 +1,13 @@
+export class ChangeRequest {
+  created_by : string;
+  modified_by : string;
+  new_card : string;
+  new_access_points : string[];
+  feedback : string;
+  reason : string;
+  resource_uri : string;
+  id : number;
+  request_level : number;
+  status : number;
+  user : string;
+}
diff --git a/src/app/shared/constants.ts b/src/app/shared/constants.ts
new file mode 100644
index 0000000..368b421
--- /dev/null
+++ b/src/app/shared/constants.ts
@@ -0,0 +1,4 @@
+export class Constants {
+  public static API_PORT = 'http://34.193.86.61'
+  public static API_ENDPOINT = '/api/v1/';
+}
diff --git a/src/app/shared/managed-resource.ts b/src/app/shared/managed-resource.ts
new file mode 100644
index 0000000..003cc88
--- /dev/null
+++ b/src/app/shared/managed-resource.ts
@@ -0,0 +1,10 @@
+export class ManagedResource {
+  city : string;
+  country : string;
+  resource_name : string;
+  resource_uri : string;
+  state : string;
+  id : number;
+  street : string;
+  zipcode : string;
+}
diff --git a/src/app/shared/manager.guard.spec.ts b/src/app/shared/manager.guard.spec.ts
new file mode 100644
index 0000000..6e6f274
--- /dev/null
+++ b/src/app/shared/manager.guard.spec.ts
@@ -0,0 +1,15 @@
+import { TestBed, async, inject } from '@angular/core/testing';
+
+import { ManagerGuard } from './manager.guard';
+
+describe('ManagerGuard', () => {
+  beforeEach(() => {
+    TestBed.configureTestingModule({
+      providers: [ManagerGuard]
+    });
+  });
+
+  it('should ...', inject([ManagerGuard], (guard: ManagerGuard) => {
+    expect(guard).toBeTruthy();
+  }));
+});
diff --git a/src/app/shared/manager.guard.ts b/src/app/shared/manager.guard.ts
new file mode 100644
index 0000000..c0750a7
--- /dev/null
+++ b/src/app/shared/manager.guard.ts
@@ -0,0 +1,24 @@
+import { Injectable } from '@angular/core';
+import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';
+import { Observable } from 'rxjs/Observable';
+import {UserService} from "../user/shared/user.service";
+import {UserAccount} from "./user_account";
+
+@Injectable()
+export class ManagerGuard implements CanActivate {
+
+  constructor (private userService : UserService) {
+    this.userService.userAccount.subscribe(data => this.userAccount = data);
+  }
+
+  private userAccount : UserAccount;
+
+  canActivate(
+    next: ActivatedRouteSnapshot,
+    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {
+
+    return this.userService.userAccount.filter(data => data !== null).map((userAccount) => {
+      return userAccount.manager_level > 0
+    }).first();
+  }
+}
diff --git a/src/app/shared/user.ts b/src/app/shared/user.ts
new file mode 100644
index 0000000..0cc7baa
--- /dev/null
+++ b/src/app/shared/user.ts
@@ -0,0 +1,14 @@
+export class User {
+  barcode: number;
+  birth_date : string;
+  class_year : number;
+  first_name : string;
+  id : number;
+  jumbocash_id : number;
+  last_name : string;
+  middle_initial : string;
+  resource_uri : string;
+  school : string;
+  student_type : string;
+  utln : string;
+}
diff --git a/src/app/shared/user_account.ts b/src/app/shared/user_account.ts
new file mode 100644
index 0000000..a7d09e0
--- /dev/null
+++ b/src/app/shared/user_account.ts
@@ -0,0 +1,10 @@
+export class UserAccount {
+  id : number;
+  first_name : string;
+  last_name : string;
+  card : string;
+  resource_uri : string;
+  utln : string;
+  manager_level : number;
+  access_points : string[];
+}
diff --git a/src/app/user.ts b/src/app/user.ts
deleted file mode 100644
index 7507a2c..0000000
--- a/src/app/user.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-export class User {
-  barcode: number;
-  birth_date : string;
-  class_year : number;
-  first_name : string;
-  id : number;
-  jumbocash_id : number;
-  last_name : string;
-  middle_initial : string;
-  resource_url : string;
-  school : string;
-  student_type : string;
-  utln : string;
-}
diff --git a/src/app/user/shared/user.service.spec.ts b/src/app/user/shared/user.service.spec.ts
new file mode 100644
index 0000000..823bfca
--- /dev/null
+++ b/src/app/user/shared/user.service.spec.ts
@@ -0,0 +1,15 @@
+import { TestBed, inject } from '@angular/core/testing';
+
+import { UserService } from './user.service';
+
+describe('UserService', () => {
+  beforeEach(() => {
+    TestBed.configureTestingModule({
+      providers: [UserService]
+    });
+  });
+
+  it('should ...', inject([UserService], (service: UserService) => {
+    expect(service).toBeTruthy();
+  }));
+});
diff --git a/src/app/user/shared/user.service.ts b/src/app/user/shared/user.service.ts
new file mode 100644
index 0000000..eb505d6
--- /dev/null
+++ b/src/app/user/shared/user.service.ts
@@ -0,0 +1,83 @@
+import { Injectable } from '@angular/core';
+import { Http, Response } from '@angular/http';
+import { Observable } from 'rxjs/Observable';
+import 'rxjs/add/operator/catch';
+import 'rxjs/add/operator/map';
+import {User} from "../../shared/user";
+import {UserAccount} from "../../shared/user_account";
+import {Constants} from "../../shared/constants";
+import {BehaviorSubject} from "rxjs";
+
+@Injectable()
+export class UserService {
+  public userAccount : Observable<UserAccount>;
+  public userCard : Observable<User>;
+  private djangoUrl = Constants.API_ENDPOINT;
+
+  constructor(
+    private http: Http
+  ) {
+    this.userCard = this._userCard.asObservable();
+    this.userAccount = this._userAccount.asObservable();
+    this.initData();
+  }
+
+  public getUtln() : string {
+    return 'hkaise01';
+  }
+
+  isAdmin() : boolean {
+    return true;
+  }
+
+  private getUserAccount (): Observable<UserAccount[]> {
+    return this.http.get(Constants.API_PORT + '/api/v1/user_account/?utln=' + this.getUtln())
+      .map(this.extractData)
+      .catch(this.handleError);
+  }
+
+  private getCard (url : string): Observable<User> {
+    return this.http.get(Constants.API_PORT + url)
+      .map(this.extractData)
+      .catch(this.handleError);
+  }
+
+  private _userCard : BehaviorSubject<User> = new BehaviorSubject(null);
+  private _userAccount : BehaviorSubject<UserAccount> = new BehaviorSubject(null);
+
+  private initData () {
+    this.getUserAccount().subscribe(
+      data => {
+        this._userAccount.next(data[0]);
+        this.getCard(data[0].card).subscribe(
+          data => {
+            this._userCard.next(data);
+          },
+          error => {
+          });
+      },
+      error => {
+      }
+    );
+  }
+
+  private extractData(res: Response) {
+    let body = res.json();
+    return body.objects || body || { };
+  }
+
+  private handleError (error: Response | any) {
+    // TODO: Add remote logging
+    let errMsg: string;
+    if (error instanceof Response) {
+      const body = error.json() || '';
+      const err = body.error || JSON.stringify(body);
+      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;
+    } else {
+      errMsg = error.message ? error.message : error.toString();
+    }
+    console.error(errMsg);
+    return Observable.throw(errMsg);
+  }
+
+}
diff --git a/src/app/user/user-home/user-home.component.ts b/src/app/user/user-home/user-home.component.ts
index 3bb1502..2b9d672 100644
--- a/src/app/user/user-home/user-home.component.ts
+++ b/src/app/user/user-home/user-home.component.ts
@@ -1,6 +1,6 @@
 import { Component, OnInit } from '@angular/core';
 import {Router, ActivatedRoute} from "@angular/router";
-import {UserService} from "../user.service";
+import {UserService} from "../shared/user.service";
 
 @Component({
   selector: 'app-user-home',
@@ -35,10 +35,16 @@ export class UserHomeComponent implements OnInit {
   }
 
   ngOnInit() {
+    console.log('init home');
+    this.userService.userAccount.filter(data => data !== null).subscribe(
+      data => {
+        this.isAdmin = data.manager_level > 0
+      }
+    )
   }
 
   utln = this.userService.getUtln();
-  isAdmin = this.userService.isAdmin();
+  isAdmin : boolean = false;
 
   settings() {
     this.activeLinkIndex = -1;
diff --git a/src/app/user/user-id/user-id.component.html b/src/app/user/user-id/user-id.component.html
index cb911e5..b3faf4a 100644
--- a/src/app/user/user-id/user-id.component.html
+++ b/src/app/user/user-id/user-id.component.html
@@ -1,5 +1,5 @@
 <div class="id-card-wrapper" fxLayoutAlign="center center" fxFlex fxLayout="column">
-  <md-card>
+  <md-card *ngIf="user">
     <md-card-header>
       <img md-card-avatar src="../favicon.ico">
       <md-card-title>
diff --git a/src/app/user/user-id/user-id.component.ts b/src/app/user/user-id/user-id.component.ts
index 8cadb36..9a34de1 100644
--- a/src/app/user/user-id/user-id.component.ts
+++ b/src/app/user/user-id/user-id.component.ts
@@ -1,7 +1,8 @@
 import { Component, OnInit } from '@angular/core';
 import {MdDialog} from '@angular/material';
-import {UserService} from "../user.service";
-import {User} from "../../user";
+import {UserService} from "../shared/user.service";
+import {User} from "../../shared/user";
+import {RequestService} from "../../request/request.service";
 
 @Component({
   selector: 'app-user-id',
@@ -12,31 +13,43 @@ export class UserIdComponent implements OnInit {
 
   constructor(
     public dialog : MdDialog,
+    private requestService : RequestService,
     private userService : UserService
   ) { }
 
-  user = new User();
-  errorMessage : string;
-
   ngOnInit() {
     this.getUser();
+    this.requestService.getResources().subscribe(
+      data => {
+        console.log(data);
+        this.requestService.getAccessPoints(data[0]).subscribe(
+          data => {
+            console.log(data);
+          }
+        )
+      }
+    )
   }
 
-  getUser () {
-    this.userService.getUser(this.utln)
-                    .subscribe(
-                      users => this.user = users[0],
-                      error =>  this.errorMessage = <any>error);
+  public user : User;
+  public utln : string;
+
+  public requestChange() {
+    this.requestService.makeUpdateCard(this.user);
+    this.dialog.open(UserIdRequestDialog);
   }
 
-  utln = this.userService.getUtln();
+  public report() {
 
-  requestChange() {
-    this.dialog.open(UserIdRequestDialog);
   }
 
-  report() {
-    alert("Report lost/stolen");
+  private errorMessage : string;
+
+  private getUser () {
+    this.utln = this.userService.getUtln();
+    this.userService.userCard.subscribe(
+      data => this.user = data
+    );
   }
 
 }
diff --git a/src/app/user/user.module.ts b/src/app/user/user.module.ts
index 3995065..c92cc70 100644
--- a/src/app/user/user.module.ts
+++ b/src/app/user/user.module.ts
@@ -8,17 +8,14 @@ import {UserIdComponent, UserIdRequestDialog} from './user-id/user-id.component'
 import {UserAreaComponent, UserAreaDialog} from './user-area/user-area.component';
 import { UserRequestComponent } from './user-request/user-request.component';
 import { UserHomeComponent } from './user-home/user-home.component';
-import {AgmCoreModule} from "angular2-google-maps/core";
 import { UserAccountComponent } from './user-account/user-account.component';
-import {UserService} from "./user.service";
 
 @NgModule({
   imports: [
     CommonModule,
     MaterialModule,
     FlexLayoutModule,
-    UserRoutingModule,
-    AgmCoreModule
+    UserRoutingModule
   ],
   declarations: [
     UserIdComponent,
@@ -36,7 +33,6 @@ import {UserService} from "./user.service";
     UserIdRequestDialog
   ],
   providers: [
-    UserService
   ]
 })
 export class UserModule { }
diff --git a/src/app/user/user.service.spec.ts b/src/app/user/user.service.spec.ts
deleted file mode 100644
index 823bfca..0000000
--- a/src/app/user/user.service.spec.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-import { TestBed, inject } from '@angular/core/testing';
-
-import { UserService } from './user.service';
-
-describe('UserService', () => {
-  beforeEach(() => {
-    TestBed.configureTestingModule({
-      providers: [UserService]
-    });
-  });
-
-  it('should ...', inject([UserService], (service: UserService) => {
-    expect(service).toBeTruthy();
-  }));
-});
diff --git a/src/app/user/user.service.ts b/src/app/user/user.service.ts
deleted file mode 100644
index 118547c..0000000
--- a/src/app/user/user.service.ts
+++ /dev/null
@@ -1,58 +0,0 @@
-import { Injectable } from '@angular/core';
-import { Http, Response }          from '@angular/http';
-import { Observable } from 'rxjs/Observable';
-import 'rxjs/add/operator/catch';
-import 'rxjs/add/operator/map';
-import {Building} from "../building";
-import {User} from "../user";
-
-
-@Injectable()
-export class UserService {
-
-  private djangoUrl = 'http://ec2-107-20-90-253.compute-1.amazonaws.com:8000/api/v1/';
-
-  constructor(
-    private http: Http
-  ) { }
-
-  getUtln() : string {
-    return 'masnes01';
-  }
-
-  isAdmin() : boolean {
-    return true;
-  }
-
-  getBuildings (): Observable<Building[]> {
-    return this.http.get(this.djangoUrl + 'door/')
-      .map(this.extractData)
-      .catch(this.handleError);
-  }
-
-  getUser (utln : string): Observable<User[]> {
-    return this.http.get(this.djangoUrl + 'card/?utln=' + utln)
-      .map(this.extractData)
-      .catch(this.handleError);
-  }
-
-  private extractData(res: Response) {
-    let body = res.json();
-    return body.objects || { };
-  }
-
-  private handleError (error: Response | any) {
-    // TODO: Add remote logging
-    let errMsg: string;
-    if (error instanceof Response) {
-      const body = error.json() || '';
-      const err = body.error || JSON.stringify(body);
-      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;
-    } else {
-      errMsg = error.message ? error.message : error.toString();
-    }
-    console.error(errMsg);
-    return Observable.throw(errMsg);
-  }
-
-}
diff --git a/start.sh b/start.sh
index e51ceb6..d1c840c 100755
--- a/start.sh
+++ b/start.sh
@@ -10,8 +10,9 @@ noc="\033[38;5;15m"
 d=$(dirname "$0")
 
 echo -e "${goodc}Checking environment setup.${noc}"
+# set +e
 $d/utils/env-check.sh
-
+# set -e
 echo -e "${goodc}Stopping server.${noc}"
 $d/stop.sh
 echo -e "${goodc}Starting Database.${noc}"
@@ -22,7 +23,7 @@ $d/backend/migrate.sh
 echo -e "${goodc}Repopulating database with test data.${noc}"
 psql -d postgres -U postgres < $d/utils/recreate_database.sql 1>/dev/null
 
-sql_c=$(python $d/backend/manage.py sqlsequencereset cardcontrol)
+sql_c=$(python3.6 $d/backend/manage.py sqlsequencereset cardcontrol)
 echo "${sql_c}" | psql -d cardcontrol -U postgres
 
 expect <<- DONE
@@ -30,16 +31,30 @@ expect <<- DONE
     expect -re ".*Quit the server with CONTROL-C.*"
 DONE
 
-echo -e "${goodc}Checking frontend packages up to date.${noc}"
-npm install
+set +u
+echo "$1"
+#if [[ -z $1 ]] || [[ $1 =~ ^[^aA].* ]]; then
+#echo -e "${goodc}Checking frontend packages up to date.${noc}"
+#npm install
+#echo -e "${goodc}Starting frontent process.${noc}"
+
+#expect <<- DONE
+#    set timeout 120
+#    spawn -ignore HUP bash -ilc "ng serve &"
+#    expect -re ".*webpack: Compiled successfully.*"
+#DONE
+#fi
 
-echo -e "${goodc}Starting frontent process.${noc}"
 expect <<- DONE
-    set timeout 120
-    spawn -ignore HUP bash -ilc "ng serve &"
-    expect -re ".*webpack: Compiled successfully.*"
+    spawn sudo uwsgi -T --die-on-term --ini $d/backend/uwsgi.ini
+    expect -re ".*Operational MODE: preforking.*"
 DONE
 
+sudo nginx
+
+
 echo ""
 echo -e "${goodc}Database, frontend, and backend started successfully.${noc}"
 echo ""
+
+
diff --git a/stop.sh b/stop.sh
index 859199f..742db03 100755
--- a/stop.sh
+++ b/stop.sh
@@ -13,7 +13,7 @@ echo -e "${goodc}Stopping database.${noc}"
 $d/utils/stop_db.sh 2> /dev/null
 echo -e "${goodc}Gathering PIDs for Angular and Django.${noc}"
 set +e
-pids=$(ps auxww | grep -E "angular|runserve|nginx|uwsgi" | grep -v grep | awk '{print $2}' | sort | uniq)
+pids=$(ps auxww | grep -E "angular|runserve|nginx|uwsgi|postgres|psql|pgsql" | grep -v grep | awk '{print $2}' | sort | uniq)
 set -e
 echo -e "${goodc}Killing PIDs:${noc}"
 for pid in $pids; do
diff --git a/utils/check-python-dependencies.py b/utils/check-python-dependencies.py
index da7dced..4e2f46d 100755
--- a/utils/check-python-dependencies.py
+++ b/utils/check-python-dependencies.py
@@ -1,8 +1,8 @@
 #!/usr/local/bin/python3.6
 import pip
 
-expected = ["python-mimeparse", "setuptools", "six", "python-dateutil", "psycopg2", "pip", "lxml", "Django", "django-tastypie", "defusedxml", "django-cors-headers"]
-versions = {"virtualenv": "15.1.0", "six": "1.10.0", "setuptools": "28.8.0", "python-mimeparse": "1.6.0", "python-dateutil": "2.6.0", "psycopg2": "2.7", "pip": "9.0.1", "lxml": "3.7.3", "Django": "1.10.5", "django-tastypie": "0.13.3", "defusedxml": "0.5.0", "django-cors-headers": "2.0.2", "gnureadline": "6.3.3"}
+expected = ["python-mimeparse", "setuptools", "six", "python-dateutil", "psycopg2", "pip", "lxml", "Django", "django-tastypie", "defusedxml", "django-cors-headers", "ipaddress", "requests"]
+versions = {"virtualenv": "15.1.0", "six": "1.10.0", "setuptools": "28.8.0", "python-mimeparse": "1.6.0", "python-dateutil": "2.6.0", "psycopg2": "2.7", "pip": "9.0.1", "lxml": "3.7.3", "Django": "1.10.5", "django-tastypie": "0.13.3", "defusedxml": "0.5.0", "django-cors-headers": "2.0.2", "gnureadline": "6.3.3", "requests" : "2.13.0", "ipaddress" : "1.0.18"}
 
 goodc = "\033[38;5;10m"
 qc = "\033[38;5;222m"
diff --git a/utils/env-check.sh b/utils/env-check.sh
index b03fe9c..93f0490 100755
--- a/utils/env-check.sh
+++ b/utils/env-check.sh
@@ -12,6 +12,8 @@ echo -n "NODE:           "
 nodev=$(node -v | sed 's/v//')
 if [[ "$nodev" == "7.7.0" ]]; then
 	echo -ne "$goodc"
+elif [[ $nodev =~ 7\.7.* ]]; then
+	echo -ne "$qc"
 else
 	echo -ne "$badc"
 	es=1
@@ -20,8 +22,10 @@ echo -e "$nodev${noc}"
 
 echo -n "NPM:            "
 npmv=$(npm -v)
-if [[ "$npmv" == "4.1.2" ]]; then
+if [[ "$npmv" == "4.4.4" ]]; then
 	echo -ne "$goodc"
+elif [[ $npmv =~ 4\.4.* ]]; then
+	echo -ne "$qc"
 else
 	echo -ne "$badc"
 	es=1
@@ -30,8 +34,10 @@ echo -e "$npmv${noc}"
 
 echo -n "ANGULAR CLI:    "
 ngv=$(ng -v | grep angular | head -1 | sed 's/@angular\/cli: //')
-if [[ "$ngv" == "1.0.0-rc.4" ]]; then
+if [[ "$ngv" == "1.0.0" ]]; then
 	echo -ne "$goodc"
+elif [[ $ngv =~ 1\.0.* ]]; then
+	echo -ne "$qc"
 else
 	echo -ne "$badc"
 	es=1
@@ -42,6 +48,8 @@ echo -n "ANGULAR NODE:   "
 anv=$(ng -v | grep node | head -1 | sed 's/node: //')
 if [[ "$anv" == "7.7.0" ]]; then
 	echo -ne "$goodc"
+elif [[ $anv =~ 7\.7.* ]]; then
+	echo -ne "$qc"
 else
 	echo -ne "$badc"
 	es=1
@@ -50,8 +58,10 @@ echo -e "$anv${noc}"
 
 echo -n "ANGULAR CORE:   "
 acv=$(ng -v | grep "core" | head -1 | sed 's/@angular\/core: //')
-if [[ "$acv" == "2.4.10" ]]; then
+if [[ "$acv" == "4.0.1" ]]; then
 	echo -ne "$goodc"
+elif [[ $acv =~ 4\.0.* ]]; then
+	echo -ne "$qc"
 else
 	echo -ne "$badc"
 	es=1
@@ -62,6 +72,8 @@ echo -n "POSTGRESQL:     "
 psqlv=$(psql -V | sed 's/psql (PostgreSQL) //')
 if [[ "$psqlv" == "9.6.2" ]]; then
 	echo -ne "$goodc"
+elif [[ $psqlv =~ 9\.6.* ]]; then
+	echo -ne "$qc"
 else
 	echo -ne "$badc"
 	es=1
@@ -72,6 +84,8 @@ echo -n "PYTHON 3:       "
 py3v=$(python3.6 -V | sed 's/Python //')
 if [[ "$py3v" == "3.6.0" ]]; then
 	echo -ne "$goodc"
+elif [[ $py3v =~ 3\.6.* ]]; then
+	echo -ne "$qc"
 else
 	echo -ne "$badc"
 	es=1
@@ -82,6 +96,8 @@ echo -n "PIP3:           "
 pip3v=$(pip3 -V | sed 's/ from.*//' | sed 's/pip //')
 if [[ "$pip3v" == "9.0.1" ]]; then
 	echo -ne "$goodc"
+elif [[ $pip3v =~ 9\.0.* ]]; then
+	echo -ne "$qc"
 else
 	echo -ne "$badc"
 	es=1
@@ -92,14 +108,44 @@ echo -n "DJANGO:         "
 djv=$(python3.6 -c "import django; print(django.get_version())")
 if [[ "$djv" == "1.10.5" ]]; then
 	echo -ne "$goodc"
+elif [[ $djv =~ 1\.10.* ]]; then
+	echo -ne "$qc"
 else
 	echo -ne "$badc"
 	es=1
 fi;
 echo -e "$djv${noc}"
 
-cd - 1>/dev/null
+echo -n "NGINX:          "
+nxv=$(nginx -v 2>&1 | sed 's/nginx version: nginx\///')
+if [[ "$nxv" == "1.10.3" ]]; then
+	echo -ne "$goodc"
+elif [[ $nxv =~ 1\.10.* ]]; then
+	echo -ne "$qc"
+else
+	echo -ne "$badc"
+	es=1
+fi;
+echo -e "$nxv${noc}";
+
+echo -n "UWSGI:          "
+uwv=$(uwsgi --version)
+if [[ "$uwv" == "2.0.15" ]]; then
+	echo -ne "$goodc"
+elif [[ $uwv =~ 2\.0.* ]]; then
+	echo -ne "$qc"
+else
+	echo -ne "$badc"
+	es=1
+fi;
+echo -e "$uwv${noc}";
 
 if [[ $es -eq 1 ]]; then
 	exit $es
 fi;
+
+cd - 2>/dev/null 1>/dev/null
+
+
+
+
diff --git a/utils/recreate_database.sql b/utils/recreate_database.sql
index f2fc628..8a2bcf4 100644
--- a/utils/recreate_database.sql
+++ b/utils/recreate_database.sql
@@ -1,40 +1,55 @@
 \c cardcontrol
 
-INSERT INTO cardcontrol_manageraccount VALUES(1, 'Matthew', 'Asnes', 'masnes01', 3);
-INSERT INTO cardcontrol_manageraccount VALUES(2, 'Adam', 'Plumer', 'aplume01', 0);
-
-INSERT INTO cardcontrol_door VALUES(1, '56 Professors Row, Medford, MA, 02155', 'Metcalf Hall', 'Metcalf East', now(), now(), 1, 1);
-INSERT INTO cardcontrol_door VALUES(2, '56 Professors Row, Medford, MA, 02155', 'Metcalf Hall', 'Metcalf West', now(), now(), 1, 1);
-INSERT INTO cardcontrol_door VALUES(3, '161 College Ave, Medford, MA, 02155', 'Halligan Hall', 'Main Entrance', now(), now(), 1, 1);
-INSERT INTO cardcontrol_door VALUES(4, '161 College Ave, Medford, MA, 02155', 'Halligan Hall', 'Halligan Extension Entrance', now(), now(), 1, 1);
-INSERT INTO cardcontrol_door VALUES(5, '574 Boston Ave, Medford, MA, 02155', 'CLIC', 'Main Entrance', now(), now(), 1, 1);
-INSERT INTO cardcontrol_door VALUES(6, '574 Boston Ave, Medford, MA, 02155', 'CLIC', 'Physics Department', now(), now(), 1, 1);
-
-INSERT INTO cardcontrol_card VALUES(1, 'Harrison', 'Kaiser', 'M', 'hkaise01', 'Undergraduate', '111222333', date '1996-10-02', 'Liberal Arts', '2019', '000000000', now(), now(), 1, 1);
-INSERT INTO cardcontrol_card VALUES(2, 'Matthew', 'Asnes', 'D', 'masnes01', 'Undergraduate', '111222334', date '1996-08-04', 'Liberal Arts', '2018', '000001000', now(), now(), 1, 1);
-INSERT INTO cardcontrol_card VALUES(3, 'Marina', 'Rakhilin', 'S', 'mrakhi01', 'Undergraduate', '111222335', date '1996-02-04', 'Liberal Arts', '2018', '000001001', now(), now(), 1, 1);
-INSERT INTO cardcontrol_card VALUES(4, 'Nicolas', 'Asnes', 'W', 'nasnes01', 'Undergraduate', '111222336', date '2001-02-03', 'Liberal Arts', '2023', '000001010', now(), now(), 1, 1);
-INSERT INTO cardcontrol_card VALUES(5, 'Harrison', 'Kaiser', 'M', 'hkaise01', 'Undergraduate', '111222333', date '1996-10-02', 'Engineering', '2019', '000000000', now(), now(), 1, 1);
-INSERT INTO cardcontrol_card VALUES(6, 'Matt', 'Asnes', 'D', 'masnes01', 'Undergraduate', '111222334', date '1996-08-04', 'Liberal Arts', '2018', '000001000', now(), now(), 1, 1);
-
-INSERT INTO cardcontrol_card_doors VALUES(1, 1, 1);
-INSERT INTO cardcontrol_card_doors VALUES(2, 1, 2);
-INSERT INTO cardcontrol_card_doors VALUES(3, 1, 3);
-INSERT INTO cardcontrol_card_doors VALUES(4, 1, 5);
-INSERT INTO cardcontrol_card_doors VALUES(5, 2, 1);
-INSERT INTO cardcontrol_card_doors VALUES(6, 2, 2);
-INSERT INTO cardcontrol_card_doors VALUES(7, 2, 3);
-INSERT INTO cardcontrol_card_doors VALUES(8, 2, 5);
-INSERT INTO cardcontrol_card_doors VALUES(9, 2, 6);
-INSERT INTO cardcontrol_card_doors VALUES(10, 3, 1);
-INSERT INTO cardcontrol_card_doors VALUES(11, 3, 2);
-INSERT INTO cardcontrol_card_doors VALUES(12, 4, 4);
-
-INSERT INTO cardcontrol_useraccount VALUES(1, 'Matthew', 'Asnes', 'masnes01', now(), now(), 2, 1, 1);
-INSERT INTO cardcontrol_useraccount VALUES(2, 'Harrison', 'Kaiser', 'hkaise01', now(), now(), 1, 1, 1);
-
-INSERT INTO cardcontrol_request VALUES(1, now(), now(), 1, 1, 5, 1);
-INSERT INTO cardcontrol_request VALUES(2, now(), now(), 1, 1, 5, 2);
+-- Note: SINGLE QUOTES ONLY!
+
+INSERT INTO cardcontrol_card VALUES(1, 'Harrison', 'Kaiser', 'M', 'hkaise01', 'Undergraduate', '111222333', date '1996-10-02', 'Liberal Arts', '2019', '000000000', now(), now());
+INSERT INTO cardcontrol_card VALUES(2, 'Matthew', 'Asnes', 'D', 'masnes01', 'Undergraduate', '111222334', date '1996-08-04', 'Liberal Arts', '2018', '000001000', now(), now());
+INSERT INTO cardcontrol_card VALUES(3, 'Marina', 'Rakhilin', 'S', 'mrakhi01', 'Undergraduate', '111222335', date '1996-02-04', 'Liberal Arts', '2018', '000001001', now(), now());
+INSERT INTO cardcontrol_card VALUES(4, 'Nicolas', 'Asnes', 'W', 'nasnes01', 'Undergraduate', '111222336', date '2001-02-03', 'Liberal Arts', '2023', '000001010', now(), now());
+INSERT INTO cardcontrol_card VALUES(5, 'Harrison', 'Kaiser', 'M', 'hkaise01', 'Undergraduate', '111222333', date '1996-09-02', 'Engineering', '2019', '000000000', now(), now());
+INSERT INTO cardcontrol_card VALUES(6, 'Matt', 'Asnes', 'D', 'masnes01', 'Undergraduate', '111222334', date '1996-08-04', 'Liberal Arts', '2018', '000001000', now(), now());
+
+INSERT INTO cardcontrol_useraccount VALUES(1, 'Matthew', 'Asnes', 'masnes01', now(), now(), 2, 2);
+INSERT INTO cardcontrol_useraccount VALUES(2, 'Harrison', 'Kaiser', 'hkaise01', now(), now(), 0, 1);
+INSERT INTO cardcontrol_useraccount VALUES(3, 'Adam', 'Plumer', 'aplume01', now(), now(), 1, 1);
+
+INSERT INTO cardcontrol_resource VALUES(1, '02155', '56 Professors Row', 'Medford', 'MA', 'United States', 'Metcalf Hall', now(), now(), 1, 1);
+INSERT INTO cardcontrol_resource VALUES(2, '02155', '161 College Ave', 'Medford', 'MA', 'United States', 'Halligan Hall', now(), now(), 1, 1);
+INSERT INTO cardcontrol_resource VALUES(3, '02155', '574 Boston Ave', 'Medford', 'MA', 'United States', 'CLIC Building', now(), now(), 1, 1);
+
+INSERT INTO cardcontrol_domain VALUES(1, 'Tufts University', now(), now(), 1, 1);
+INSERT INTO cardcontrol_domain VALUES(2, 'CS Department', now(), now(), 1, 1);
+
+INSERT INTO cardcontrol_domain_resources VALUES(1, 1, 1);
+INSERT INTO cardcontrol_domain_resources VALUES(2, 1, 2);
+INSERT INTO cardcontrol_domain_resources VALUES(3, 1, 3);
+
+INSERT INTO cardcontrol_domain_resources VALUES(4, 2, 2);
+
+INSERT INTO cardcontrol_domain_domains VALUES(1, 1, 2);
+
+INSERT INTO cardcontrol_accesspoint VALUES(1, 'Metcalf East', now(), now(), 1, 1, 1);
+INSERT INTO cardcontrol_accesspoint VALUES(2, 'Metcalf West', now(), now(), 1, 1, 1);
+INSERT INTO cardcontrol_accesspoint VALUES(3, 'Main Entrance', now(), now(), 1, 1, 2);
+INSERT INTO cardcontrol_accesspoint VALUES(4, 'Halligan Extension Entrance', now(), now(), 1, 1, 2);
+INSERT INTO cardcontrol_accesspoint VALUES(5, 'Main Entrance', now(), now(), 1, 1, 3);
+INSERT INTO cardcontrol_accesspoint VALUES(6, 'Physics Department', now(), now(), 1, 1, 3);
+
+INSERT INTO cardcontrol_useraccount_access_points VALUES(1, 1, 1);
+INSERT INTO cardcontrol_useraccount_access_points VALUES(2, 1, 2);
+INSERT INTO cardcontrol_useraccount_access_points VALUES(3, 1, 3);
+INSERT INTO cardcontrol_useraccount_access_points VALUES(4, 1, 5);
+INSERT INTO cardcontrol_useraccount_access_points VALUES(5, 2, 1);
+INSERT INTO cardcontrol_useraccount_access_points VALUES(6, 2, 2);
+INSERT INTO cardcontrol_useraccount_access_points VALUES(7, 2, 3);
+INSERT INTO cardcontrol_useraccount_access_points VALUES(8, 2, 5);
+INSERT INTO cardcontrol_useraccount_access_points VALUES(9, 2, 6);
+INSERT INTO cardcontrol_useraccount_access_points VALUES(10, 3, 1);
+INSERT INTO cardcontrol_useraccount_access_points VALUES(11, 3, 2);
+INSERT INTO cardcontrol_useraccount_access_points VALUES(12, 3, 4);
+
+INSERT INTO cardcontrol_request VALUES(1, 1, 0, null, null, now(), now(), 1, 1, 5, 1);
+INSERT INTO cardcontrol_request VALUES(2, 1, 0, null, null, now(), now(), 1, 1, 5, 2);
 
 \q
 
